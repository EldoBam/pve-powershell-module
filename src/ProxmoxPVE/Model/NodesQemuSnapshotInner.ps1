#
# Proxmox VE
# Generated module to access all Proxmox VE Api Endpoints
# Version: 0.2
# Contact: 
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Name
No description available.
.PARAMETER Description
No description available.
.PARAMETER Snaptime
No description available.
.PARAMETER Parent
No description available.
.PARAMETER Vmstate
No description available.
.OUTPUTS

NodesQemuSnapshotInner<PSCustomObject>
#>

function Initialize-PVENodesQemuSnapshotInner {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Snaptime},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Parent},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Vmstate}
    )

    Process {
        'Creating PSCustomObject: ProxmoxPVE => PVENodesQemuSnapshotInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($Vmstate -and $Vmstate -gt 1) {
          throw "invalid value for 'Vmstate', must be smaller than or equal to 1."
        }

        if ($Vmstate -and $Vmstate -lt 0) {
          throw "invalid value for 'Vmstate', must be greater than or equal to 0."
        }


		 $DisplayNameMapping =@{
			"Name"="name"; "Description"="description"; "Snaptime"="snaptime"; "Parent"="parent"; "Vmstate"="vmstate"
        }
		
		 $OBJ = @{}
		foreach($parameter in   $PSBoundParameters.Keys){
			#If Specifield map the Display name back
			$OBJ.($DisplayNameMapping.($parameter)) = "$PSBoundParameters.$parameter"
		}

		$PSO = [PSCustomObject]$OBJ


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NodesQemuSnapshotInner<PSCustomObject>

.DESCRIPTION

Convert from JSON to NodesQemuSnapshotInner<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NodesQemuSnapshotInner<PSCustomObject>
#>
function ConvertFrom-PVEJsonToNodesQemuSnapshotInner {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ProxmoxPVE => PVENodesQemuSnapshotInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PVENodesQemuSnapshotInner
        $AllProperties = ("name", "description", "snaptime", "parent", "vmstate")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "snaptime"))) { #optional property not found
            $Snaptime = $null
        } else {
            $Snaptime = $JsonParameters.PSobject.Properties["snaptime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "parent"))) { #optional property not found
            $Parent = $null
        } else {
            $Parent = $JsonParameters.PSobject.Properties["parent"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vmstate"))) { #optional property not found
            $Vmstate = $null
        } else {
            $Vmstate = $JsonParameters.PSobject.Properties["vmstate"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "description" = ${Description}
            "snaptime" = ${Snaptime}
            "parent" = ${Parent}
            "vmstate" = ${Vmstate}
        }

        return $PSO
    }

}

