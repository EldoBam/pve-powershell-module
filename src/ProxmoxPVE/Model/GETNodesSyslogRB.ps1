#
# Proxmox VE
# Generated module to access all Proxmox VE Api Endpoints
# Version: 0.2
# Contact: 
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Since
No description available.
.PARAMETER Node
No description available.
.PARAMETER Limit
No description available.
.PARAMETER VarUntil
No description available.
.PARAMETER Start
No description available.
.PARAMETER Service
No description available.
.OUTPUTS

GETNodesSyslogRB<PSCustomObject>
#>

function Initialize-PVEGETNodesSyslogRB {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^\d{4}-\d{2}-\d{2}( \d{2}:\d{2}(:\d{2})?)?$")]
        [String]
        ${Since},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Node},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^\d{4}-\d{2}-\d{2}( \d{2}:\d{2}(:\d{2})?)?$")]
        [String]
        ${VarUntil},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Start},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Service}
    )

    Process {
        'Creating PSCustomObject: ProxmoxPVE => PVEGETNodesSyslogRB' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Service -and $Service.length -gt 128) {
            throw "invalid value for 'Service', the character length must be smaller than or equal to 128."
        }


		 $DisplayNameMapping =@{
			"Since"="since"; "Node"="node"; "Limit"="limit"; "VarUntil"="until"; "Start"="start"; "Service"="service"
        }
		
		 $OBJ = @{}
		foreach($parameter in   $PSBoundParameters.Keys){
			#If Specifield map the Display name back
			$OBJ.($DisplayNameMapping.($parameter)) = "$PSBoundParameters.$parameter"
		}

		$PSO = [PSCustomObject]$OBJ


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GETNodesSyslogRB<PSCustomObject>

.DESCRIPTION

Convert from JSON to GETNodesSyslogRB<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GETNodesSyslogRB<PSCustomObject>
#>
function ConvertFrom-PVEJsonToGETNodesSyslogRB {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ProxmoxPVE => PVEGETNodesSyslogRB' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PVEGETNodesSyslogRB
        $AllProperties = ("since", "node", "limit", "until", "start", "service")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "since"))) { #optional property not found
            $Since = $null
        } else {
            $Since = $JsonParameters.PSobject.Properties["since"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "node"))) { #optional property not found
            $Node = $null
        } else {
            $Node = $JsonParameters.PSobject.Properties["node"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "limit"))) { #optional property not found
            $Limit = $null
        } else {
            $Limit = $JsonParameters.PSobject.Properties["limit"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "until"))) { #optional property not found
            $VarUntil = $null
        } else {
            $VarUntil = $JsonParameters.PSobject.Properties["until"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "start"))) { #optional property not found
            $Start = $null
        } else {
            $Start = $JsonParameters.PSobject.Properties["start"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "service"))) { #optional property not found
            $Service = $null
        } else {
            $Service = $JsonParameters.PSobject.Properties["service"].value
        }

        $PSO = [PSCustomObject]@{
            "since" = ${Since}
            "node" = ${Node}
            "limit" = ${Limit}
            "until" = ${VarUntil}
            "start" = ${Start}
            "service" = ${Service}
        }

        return $PSO
    }

}

