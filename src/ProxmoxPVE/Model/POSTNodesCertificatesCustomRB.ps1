#
# Proxmox VE Module 1.0
# Generated OpenApiDescription to render Modules via OpenapiGenerator
# Version: 0.1
# Contact: 
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Force
No description available.
.PARAMETER Key
No description available.
.PARAMETER Certificates
No description available.
.PARAMETER Restart
No description available.
.PARAMETER Node
No description available.
.OUTPUTS

POSTNodesCertificatesCustomRB<PSCustomObject>
#>

function Initialize-PVEPOSTNodesCertificatesCustomRB {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Force},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Key},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Certificates},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Restart},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Node}
    )

    Process {
        'Creating PSCustomObject: ProxmoxPVE => PVEPOSTNodesCertificatesCustomRB' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($Force -and $Force -gt 1) {
          throw "invalid value for 'Force', must be smaller than or equal to 1."
        }

        if ($Force -and $Force -lt 0) {
          throw "invalid value for 'Force', must be greater than or equal to 0."
        }

        if ($Restart -and $Restart -gt 1) {
          throw "invalid value for 'Restart', must be smaller than or equal to 1."
        }

        if ($Restart -and $Restart -lt 0) {
          throw "invalid value for 'Restart', must be greater than or equal to 0."
        }


		 $DisplayNameMapping =@{
			"Force"="force"; "Key"="key"; "Certificates"="certificates"; "Restart"="restart"; "Node"="node"
        }
		
		 $OBJ = @{}
		foreach($parameter in   $PSBoundParameters.Keys){
			#If Specifield map the Display name back
			$OBJ.($DisplayNameMapping.($parameter)) = "$PSBoundParameters.$parameter"
		}

		$PSO = [PSCustomObject]$OBJ


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to POSTNodesCertificatesCustomRB<PSCustomObject>

.DESCRIPTION

Convert from JSON to POSTNodesCertificatesCustomRB<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

POSTNodesCertificatesCustomRB<PSCustomObject>
#>
function ConvertFrom-PVEJsonToPOSTNodesCertificatesCustomRB {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ProxmoxPVE => PVEPOSTNodesCertificatesCustomRB' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PVEPOSTNodesCertificatesCustomRB
        $AllProperties = ("force", "key", "certificates", "restart", "node")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "force"))) { #optional property not found
            $Force = $null
        } else {
            $Force = $JsonParameters.PSobject.Properties["force"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "key"))) { #optional property not found
            $Key = $null
        } else {
            $Key = $JsonParameters.PSobject.Properties["key"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "certificates"))) { #optional property not found
            $Certificates = $null
        } else {
            $Certificates = $JsonParameters.PSobject.Properties["certificates"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "restart"))) { #optional property not found
            $Restart = $null
        } else {
            $Restart = $JsonParameters.PSobject.Properties["restart"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "node"))) { #optional property not found
            $Node = $null
        } else {
            $Node = $JsonParameters.PSobject.Properties["node"].value
        }

        $PSO = [PSCustomObject]@{
            "force" = ${Force}
            "key" = ${Key}
            "certificates" = ${Certificates}
            "restart" = ${Restart}
            "node" = ${Node}
        }

        return $PSO
    }

}

