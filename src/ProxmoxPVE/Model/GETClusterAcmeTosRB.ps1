#
# Proxmox VE
# Generated module to access all Proxmox VE Api Endpoints
# Version: 0.5
# Contact: amna.wolf@gmail.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Directory
No description available.
.OUTPUTS

GETClusterAcmeTosRB<PSCustomObject>
#>

function Initialize-PVEGETClusterAcmeTosRB {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^https?://.*")]
        [String]
        ${Directory}
    )

    Process {
        'Creating PSCustomObject: ProxmoxPVE => PVEGETClusterAcmeTosRB' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


		 $DisplayNameMapping =@{
			"Directory"="directory"
        }
		
		 $OBJ = @{}
		foreach($parameter in   $PSBoundParameters.Keys){
			#If Specifield map the Display name back
			$OBJ.($DisplayNameMapping.($parameter)) = "$PSBoundParameters.$parameter"
		}

		$PSO = [PSCustomObject]$OBJ


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GETClusterAcmeTosRB<PSCustomObject>

.DESCRIPTION

Convert from JSON to GETClusterAcmeTosRB<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GETClusterAcmeTosRB<PSCustomObject>
#>
function ConvertFrom-PVEJsonToGETClusterAcmeTosRB {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ProxmoxPVE => PVEGETClusterAcmeTosRB' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PVEGETClusterAcmeTosRB
        $AllProperties = ("directory")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "directory"))) { #optional property not found
            $Directory = $null
        } else {
            $Directory = $JsonParameters.PSobject.Properties["directory"].value
        }

        $PSO = [PSCustomObject]@{
            "directory" = ${Directory}
        }

        return $PSO
    }

}

