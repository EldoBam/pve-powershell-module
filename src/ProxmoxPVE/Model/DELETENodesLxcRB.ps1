#
# Proxmox VE
# Generated module to access all Proxmox VE Api Endpoints
# Version: 0.3
# Contact: amna.wolf@gmail.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Force
No description available.
.PARAMETER Node
No description available.
.PARAMETER Purge
No description available.
.PARAMETER DestroyUnreferencedDisks
No description available.
.PARAMETER Vmid
No description available.
.OUTPUTS

DELETENodesLxcRB<PSCustomObject>
#>

function Initialize-PVEDELETENodesLxcRB {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Force},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Node},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Purge},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${DestroyUnreferencedDisks},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Vmid}
    )

    Process {
        'Creating PSCustomObject: ProxmoxPVE => PVEDELETENodesLxcRB' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($Force -and $Force -gt 1) {
          throw "invalid value for 'Force', must be smaller than or equal to 1."
        }

        if ($Force -and $Force -lt 0) {
          throw "invalid value for 'Force', must be greater than or equal to 0."
        }

        if ($Purge -and $Purge -gt 1) {
          throw "invalid value for 'Purge', must be smaller than or equal to 1."
        }

        if ($Purge -and $Purge -lt 0) {
          throw "invalid value for 'Purge', must be greater than or equal to 0."
        }

        if ($DestroyUnreferencedDisks -and $DestroyUnreferencedDisks -gt 1) {
          throw "invalid value for 'DestroyUnreferencedDisks', must be smaller than or equal to 1."
        }

        if ($DestroyUnreferencedDisks -and $DestroyUnreferencedDisks -lt 0) {
          throw "invalid value for 'DestroyUnreferencedDisks', must be greater than or equal to 0."
        }

        if ($Vmid -and $Vmid -gt 999999999) {
          throw "invalid value for 'Vmid', must be smaller than or equal to 999999999."
        }

        if ($Vmid -and $Vmid -lt 100) {
          throw "invalid value for 'Vmid', must be greater than or equal to 100."
        }


		 $DisplayNameMapping =@{
			"Force"="force"; "Node"="node"; "Purge"="purge"; "DestroyUnreferencedDisks"="destroy-unreferenced-disks"; "Vmid"="vmid"
        }
		
		 $OBJ = @{}
		foreach($parameter in   $PSBoundParameters.Keys){
			#If Specifield map the Display name back
			$OBJ.($DisplayNameMapping.($parameter)) = "$PSBoundParameters.$parameter"
		}

		$PSO = [PSCustomObject]$OBJ


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to DELETENodesLxcRB<PSCustomObject>

.DESCRIPTION

Convert from JSON to DELETENodesLxcRB<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

DELETENodesLxcRB<PSCustomObject>
#>
function ConvertFrom-PVEJsonToDELETENodesLxcRB {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ProxmoxPVE => PVEDELETENodesLxcRB' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PVEDELETENodesLxcRB
        $AllProperties = ("force", "node", "purge", "destroy-unreferenced-disks", "vmid")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "force"))) { #optional property not found
            $Force = $null
        } else {
            $Force = $JsonParameters.PSobject.Properties["force"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "node"))) { #optional property not found
            $Node = $null
        } else {
            $Node = $JsonParameters.PSobject.Properties["node"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "purge"))) { #optional property not found
            $Purge = $null
        } else {
            $Purge = $JsonParameters.PSobject.Properties["purge"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "destroy-unreferenced-disks"))) { #optional property not found
            $DestroyUnreferencedDisks = $null
        } else {
            $DestroyUnreferencedDisks = $JsonParameters.PSobject.Properties["destroy-unreferenced-disks"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vmid"))) { #optional property not found
            $Vmid = $null
        } else {
            $Vmid = $JsonParameters.PSobject.Properties["vmid"].value
        }

        $PSO = [PSCustomObject]@{
            "force" = ${Force}
            "node" = ${Node}
            "purge" = ${Purge}
            "destroy-unreferenced-disks" = ${DestroyUnreferencedDisks}
            "vmid" = ${Vmid}
        }

        return $PSO
    }

}

