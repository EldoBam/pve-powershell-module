#
# Proxmox VE
# Generated module to access all Proxmox VE Api Endpoints
# Version: 0.2
# Contact: 
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Privsep
No description available.
.PARAMETER Userid
No description available.
.PARAMETER Tokenid
No description available.
.PARAMETER Expire
No description available.
.PARAMETER Comment
No description available.
.OUTPUTS

PUTAccessUsersTokenRB<PSCustomObject>
#>

function Initialize-PVEPUTAccessUsersTokenRB {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Privsep},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Userid},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("(?^:[A-Za-z][A-Za-z0-9\.\-_]+)")]
        [String]
        ${Tokenid},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Expire},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Comment}
    )

    Process {
        'Creating PSCustomObject: ProxmoxPVE => PVEPUTAccessUsersTokenRB' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($Privsep -and $Privsep -gt 1) {
          throw "invalid value for 'Privsep', must be smaller than or equal to 1."
        }

        if ($Privsep -and $Privsep -lt 0) {
          throw "invalid value for 'Privsep', must be greater than or equal to 0."
        }

        if (!$Userid -and $Userid.length -gt 64) {
            throw "invalid value for 'Userid', the character length must be smaller than or equal to 64."
        }


		 $DisplayNameMapping =@{
			"Privsep"="privsep"; "Userid"="userid"; "Tokenid"="tokenid"; "Expire"="expire"; "Comment"="comment"
        }
		
		 $OBJ = @{}
		foreach($parameter in   $PSBoundParameters.Keys){
			#If Specifield map the Display name back
			$OBJ.($DisplayNameMapping.($parameter)) = "$PSBoundParameters.$parameter"
		}

		$PSO = [PSCustomObject]$OBJ


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PUTAccessUsersTokenRB<PSCustomObject>

.DESCRIPTION

Convert from JSON to PUTAccessUsersTokenRB<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PUTAccessUsersTokenRB<PSCustomObject>
#>
function ConvertFrom-PVEJsonToPUTAccessUsersTokenRB {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ProxmoxPVE => PVEPUTAccessUsersTokenRB' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PVEPUTAccessUsersTokenRB
        $AllProperties = ("privsep", "userid", "tokenid", "expire", "comment")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "privsep"))) { #optional property not found
            $Privsep = $null
        } else {
            $Privsep = $JsonParameters.PSobject.Properties["privsep"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "userid"))) { #optional property not found
            $Userid = $null
        } else {
            $Userid = $JsonParameters.PSobject.Properties["userid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tokenid"))) { #optional property not found
            $Tokenid = $null
        } else {
            $Tokenid = $JsonParameters.PSobject.Properties["tokenid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "expire"))) { #optional property not found
            $Expire = $null
        } else {
            $Expire = $JsonParameters.PSobject.Properties["expire"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "comment"))) { #optional property not found
            $Comment = $null
        } else {
            $Comment = $JsonParameters.PSobject.Properties["comment"].value
        }

        $PSO = [PSCustomObject]@{
            "privsep" = ${Privsep}
            "userid" = ${Userid}
            "tokenid" = ${Tokenid}
            "expire" = ${Expire}
            "comment" = ${Comment}
        }

        return $PSO
    }

}

