#
# Proxmox PowerShell VE
# Generated module to access all Proxmox VE Api Endpoints. This module has been generated from the proxmox api description v. 8.4.0
# Version: 8.4.0
# Contact: mail@timo-wolf.de
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER MetadataSize
No description available.
.PARAMETER LvSize
No description available.
.PARAMETER Lv
No description available.
.PARAMETER MetadataUsed
No description available.
.PARAMETER Vg
No description available.
.PARAMETER Used
No description available.
.OUTPUTS

NodesDisksLvmthinInner<PSCustomObject>
#>

function Initialize-PVENodesDisksLvmthinInner {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MetadataSize},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${LvSize},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Lv},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MetadataUsed},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Vg},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Used}
    )

    Process {
        'Creating PSCustomObject: ProxmoxPVE => PVENodesDisksLvmthinInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


		 $DisplayNameMapping =@{
			"MetadataSize"="metadata_size"; "LvSize"="lv_size"; "Lv"="lv"; "MetadataUsed"="metadata_used"; "Vg"="vg"; "Used"="used"
        }
		
		 $OBJ = @{}
		foreach($parameter in   $PSBoundParameters.Keys){
			#If Specifield map the Display name back
			$OBJ.($DisplayNameMapping.($parameter)) = $PSBoundParameters.$parameter
		}

		$PSO = [PSCustomObject]$OBJ


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NodesDisksLvmthinInner<PSCustomObject>

.DESCRIPTION

Convert from JSON to NodesDisksLvmthinInner<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NodesDisksLvmthinInner<PSCustomObject>
#>
function ConvertFrom-PVEJsonToNodesDisksLvmthinInner {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ProxmoxPVE => PVENodesDisksLvmthinInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PVENodesDisksLvmthinInner
        $AllProperties = ("metadata_size", "lv_size", "lv", "metadata_used", "vg", "used")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "metadata_size"))) { #optional property not found
            $MetadataSize = $null
        } else {
            $MetadataSize = $JsonParameters.PSobject.Properties["metadata_size"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lv_size"))) { #optional property not found
            $LvSize = $null
        } else {
            $LvSize = $JsonParameters.PSobject.Properties["lv_size"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lv"))) { #optional property not found
            $Lv = $null
        } else {
            $Lv = $JsonParameters.PSobject.Properties["lv"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "metadata_used"))) { #optional property not found
            $MetadataUsed = $null
        } else {
            $MetadataUsed = $JsonParameters.PSobject.Properties["metadata_used"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vg"))) { #optional property not found
            $Vg = $null
        } else {
            $Vg = $JsonParameters.PSobject.Properties["vg"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "used"))) { #optional property not found
            $Used = $null
        } else {
            $Used = $JsonParameters.PSobject.Properties["used"].value
        }

        $PSO = [PSCustomObject]@{
            "metadata_size" = ${MetadataSize}
            "lv_size" = ${LvSize}
            "lv" = ${Lv}
            "metadata_used" = ${MetadataUsed}
            "vg" = ${Vg}
            "used" = ${Used}
        }

        return $PSO
    }

}

