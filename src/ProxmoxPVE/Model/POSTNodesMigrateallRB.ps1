#
# Proxmox VE Module 1.0
# Generated OpenApiDescription to render Modules via OpenapiGenerator
# Version: 0.1
# Contact: 
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WithLocalDisks
No description available.
.PARAMETER Vms
No description available.
.PARAMETER Maxworkers
No description available.
.PARAMETER Target
No description available.
.PARAMETER Node
No description available.
.OUTPUTS

POSTNodesMigrateallRB<PSCustomObject>
#>

function Initialize-PVEPOSTNodesMigrateallRB {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${WithLocalDisks},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Vms},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Maxworkers},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Target},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Node}
    )

    Process {
        'Creating PSCustomObject: ProxmoxPVE => PVEPOSTNodesMigrateallRB' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($WithLocalDisks -and $WithLocalDisks -gt 1) {
          throw "invalid value for 'WithLocalDisks', must be smaller than or equal to 1."
        }

        if ($WithLocalDisks -and $WithLocalDisks -lt 0) {
          throw "invalid value for 'WithLocalDisks', must be greater than or equal to 0."
        }

        if ($Maxworkers -and $Maxworkers -lt 1) {
          throw "invalid value for 'Maxworkers', must be greater than or equal to 1."
        }


		 $DisplayNameMapping =@{
			"WithLocalDisks"="with-local-disks"; "Vms"="vms"; "Maxworkers"="maxworkers"; "Target"="target"; "Node"="node"
        }
		
		 $OBJ = @{}
		foreach($parameter in   $PSBoundParameters.Keys){
			#If Specifield map the Display name back
			$OBJ.($DisplayNameMapping.($parameter)) = "$PSBoundParameters.$parameter"
		}

		$PSO = [PSCustomObject]$OBJ


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to POSTNodesMigrateallRB<PSCustomObject>

.DESCRIPTION

Convert from JSON to POSTNodesMigrateallRB<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

POSTNodesMigrateallRB<PSCustomObject>
#>
function ConvertFrom-PVEJsonToPOSTNodesMigrateallRB {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ProxmoxPVE => PVEPOSTNodesMigrateallRB' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PVEPOSTNodesMigrateallRB
        $AllProperties = ("with-local-disks", "vms", "maxworkers", "target", "node")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "with-local-disks"))) { #optional property not found
            $WithLocalDisks = $null
        } else {
            $WithLocalDisks = $JsonParameters.PSobject.Properties["with-local-disks"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vms"))) { #optional property not found
            $Vms = $null
        } else {
            $Vms = $JsonParameters.PSobject.Properties["vms"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxworkers"))) { #optional property not found
            $Maxworkers = $null
        } else {
            $Maxworkers = $JsonParameters.PSobject.Properties["maxworkers"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "target"))) { #optional property not found
            $Target = $null
        } else {
            $Target = $JsonParameters.PSobject.Properties["target"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "node"))) { #optional property not found
            $Node = $null
        } else {
            $Node = $JsonParameters.PSobject.Properties["node"].value
        }

        $PSO = [PSCustomObject]@{
            "with-local-disks" = ${WithLocalDisks}
            "vms" = ${Vms}
            "maxworkers" = ${Maxworkers}
            "target" = ${Target}
            "node" = ${Node}
        }

        return $PSO
    }

}

