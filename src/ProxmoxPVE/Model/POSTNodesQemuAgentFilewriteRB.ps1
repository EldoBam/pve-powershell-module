#
# Proxmox VE
# Generated module to access all Proxmox VE Api Endpoints
# Version: 0.2
# Contact: 
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Content
No description available.
.PARAMETER Node
No description available.
.PARAMETER Vmid
No description available.
.PARAMETER File
No description available.
.PARAMETER Encode
No description available.
.OUTPUTS

POSTNodesQemuAgentFilewriteRB<PSCustomObject>
#>

function Initialize-PVEPOSTNodesQemuAgentFilewriteRB {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Content},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Node},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Vmid},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${File},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Encode}
    )

    Process {
        'Creating PSCustomObject: ProxmoxPVE => PVEPOSTNodesQemuAgentFilewriteRB' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Content -and $Content.length -gt 61440) {
            throw "invalid value for 'Content', the character length must be smaller than or equal to 61440."
        }

        if ($Vmid -and $Vmid -gt 999999999) {
          throw "invalid value for 'Vmid', must be smaller than or equal to 999999999."
        }

        if ($Vmid -and $Vmid -lt 100) {
          throw "invalid value for 'Vmid', must be greater than or equal to 100."
        }

        if ($Encode -and $Encode -gt 1) {
          throw "invalid value for 'Encode', must be smaller than or equal to 1."
        }

        if ($Encode -and $Encode -lt 0) {
          throw "invalid value for 'Encode', must be greater than or equal to 0."
        }


		 $DisplayNameMapping =@{
			"Content"="content"; "Node"="node"; "Vmid"="vmid"; "File"="file"; "Encode"="encode"
        }
		
		 $OBJ = @{}
		foreach($parameter in   $PSBoundParameters.Keys){
			#If Specifield map the Display name back
			$OBJ.($DisplayNameMapping.($parameter)) = "$PSBoundParameters.$parameter"
		}

		$PSO = [PSCustomObject]$OBJ


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to POSTNodesQemuAgentFilewriteRB<PSCustomObject>

.DESCRIPTION

Convert from JSON to POSTNodesQemuAgentFilewriteRB<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

POSTNodesQemuAgentFilewriteRB<PSCustomObject>
#>
function ConvertFrom-PVEJsonToPOSTNodesQemuAgentFilewriteRB {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ProxmoxPVE => PVEPOSTNodesQemuAgentFilewriteRB' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PVEPOSTNodesQemuAgentFilewriteRB
        $AllProperties = ("content", "node", "vmid", "file", "encode")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "content"))) { #optional property not found
            $Content = $null
        } else {
            $Content = $JsonParameters.PSobject.Properties["content"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "node"))) { #optional property not found
            $Node = $null
        } else {
            $Node = $JsonParameters.PSobject.Properties["node"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vmid"))) { #optional property not found
            $Vmid = $null
        } else {
            $Vmid = $JsonParameters.PSobject.Properties["vmid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "file"))) { #optional property not found
            $File = $null
        } else {
            $File = $JsonParameters.PSobject.Properties["file"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "encode"))) { #optional property not found
            $Encode = $null
        } else {
            $Encode = $JsonParameters.PSobject.Properties["encode"].value
        }

        $PSO = [PSCustomObject]@{
            "content" = ${Content}
            "node" = ${Node}
            "vmid" = ${Vmid}
            "file" = ${File}
            "encode" = ${Encode}
        }

        return $PSO
    }

}

