#
# Proxmox VE
# Generated module to access all Proxmox VE Api Endpoints
# Version: 0.5
# Contact: amna.wolf@gmail.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Crypted
No description available.
.PARAMETER Password
No description available.
.PARAMETER Username
No description available.
.OUTPUTS

POSTNodesQemuAgentSetuserpasswordRB<PSCustomObject>
#>

function Initialize-PVEPOSTNodesQemuAgentSetuserpasswordRB {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Crypted},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Password},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Username}
    )

    Process {
        'Creating PSCustomObject: ProxmoxPVE => PVEPOSTNodesQemuAgentSetuserpasswordRB' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Password -and $Password.length -gt 1024) {
            throw "invalid value for 'Password', the character length must be smaller than or equal to 1024."
        }

        if (!$Password -and $Password.length -lt 5) {
            throw "invalid value for 'Password', the character length must be great than or equal to 5."
        }


		 $DisplayNameMapping =@{
			"Crypted"="crypted"; "Password"="password"; "Username"="username"
        }
		
		 $OBJ = @{}
		foreach($parameter in   $PSBoundParameters.Keys){
			#If Specifield map the Display name back
			$OBJ.($DisplayNameMapping.($parameter)) = $PSBoundParameters.$parameter
		}

		$PSO = [PSCustomObject]$OBJ


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to POSTNodesQemuAgentSetuserpasswordRB<PSCustomObject>

.DESCRIPTION

Convert from JSON to POSTNodesQemuAgentSetuserpasswordRB<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

POSTNodesQemuAgentSetuserpasswordRB<PSCustomObject>
#>
function ConvertFrom-PVEJsonToPOSTNodesQemuAgentSetuserpasswordRB {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ProxmoxPVE => PVEPOSTNodesQemuAgentSetuserpasswordRB' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PVEPOSTNodesQemuAgentSetuserpasswordRB
        $AllProperties = ("crypted", "password", "username")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "crypted"))) { #optional property not found
            $Crypted = $null
        } else {
            $Crypted = $JsonParameters.PSobject.Properties["crypted"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "password"))) { #optional property not found
            $Password = $null
        } else {
            $Password = $JsonParameters.PSobject.Properties["password"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "username"))) { #optional property not found
            $Username = $null
        } else {
            $Username = $JsonParameters.PSobject.Properties["username"].value
        }

        $PSO = [PSCustomObject]@{
            "crypted" = ${Crypted}
            "password" = ${Password}
            "username" = ${Username}
        }

        return $PSO
    }

}

