#
# Proxmox PowerShell VE
# Generated module to access all Proxmox VE Api Endpoints. This module has been generated from the proxmox api description v. 8.4.0
# Version: 8.4.0
# Contact: mail@timo-wolf.de
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Cksum
No description available.
.PARAMETER Msg
An optional message about the vdev.
.PARAMETER Name
The name of the vdev or section.
.PARAMETER Read
No description available.
.PARAMETER State
The state of the vdev.
.PARAMETER Write
No description available.
.OUTPUTS

NodesDisksZfsChildrenInner<PSCustomObject>
#>

function Initialize-PVENodesDisksZfsChildrenInner {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${Cksum},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Msg},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${Read},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${State},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${Write}
    )

    Process {
        'Creating PSCustomObject: ProxmoxPVE => PVENodesDisksZfsChildrenInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


		 $DisplayNameMapping =@{
			"Cksum"="cksum"; "Msg"="msg"; "Name"="name"; "Read"="read"; "State"="state"; "Write"="write"
        }
		
		 $OBJ = @{}
		foreach($parameter in   $PSBoundParameters.Keys){
			#If Specifield map the Display name back
			$OBJ.($DisplayNameMapping.($parameter)) = $PSBoundParameters.$parameter
		}

		$PSO = [PSCustomObject]$OBJ


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NodesDisksZfsChildrenInner<PSCustomObject>

.DESCRIPTION

Convert from JSON to NodesDisksZfsChildrenInner<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NodesDisksZfsChildrenInner<PSCustomObject>
#>
function ConvertFrom-PVEJsonToNodesDisksZfsChildrenInner {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ProxmoxPVE => PVENodesDisksZfsChildrenInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PVENodesDisksZfsChildrenInner
        $AllProperties = ("cksum", "msg", "name", "read", "state", "write")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cksum"))) { #optional property not found
            $Cksum = $null
        } else {
            $Cksum = $JsonParameters.PSobject.Properties["cksum"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "msg"))) { #optional property not found
            $Msg = $null
        } else {
            $Msg = $JsonParameters.PSobject.Properties["msg"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "read"))) { #optional property not found
            $Read = $null
        } else {
            $Read = $JsonParameters.PSobject.Properties["read"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "state"))) { #optional property not found
            $State = $null
        } else {
            $State = $JsonParameters.PSobject.Properties["state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "write"))) { #optional property not found
            $Write = $null
        } else {
            $Write = $JsonParameters.PSobject.Properties["write"].value
        }

        $PSO = [PSCustomObject]@{
            "cksum" = ${Cksum}
            "msg" = ${Msg}
            "name" = ${Name}
            "read" = ${Read}
            "state" = ${State}
            "write" = ${Write}
        }

        return $PSO
    }

}

