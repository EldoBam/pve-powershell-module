#
# Proxmox VE
# Generated module to access all Proxmox VE Api Endpoints
# Version: 0.2
# Contact: 
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Privs
No description available.
.PARAMETER Roleid
No description available.
.PARAMETER Special
No description available.
.OUTPUTS

AccessRolesGETInner<PSCustomObject>
#>

function Initialize-PVEAccessRolesGETInner {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Privs},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Roleid},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Special}
    )

    Process {
        'Creating PSCustomObject: ProxmoxPVE => PVEAccessRolesGETInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($Special -and $Special -gt 1) {
          throw "invalid value for 'Special', must be smaller than or equal to 1."
        }

        if ($Special -and $Special -lt 0) {
          throw "invalid value for 'Special', must be greater than or equal to 0."
        }


		 $DisplayNameMapping =@{
			"Privs"="privs"; "Roleid"="roleid"; "Special"="special"
        }
		
		 $OBJ = @{}
		foreach($parameter in   $PSBoundParameters.Keys){
			#If Specifield map the Display name back
			$OBJ.($DisplayNameMapping.($parameter)) = "$PSBoundParameters.$parameter"
		}

		$PSO = [PSCustomObject]$OBJ


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AccessRolesGETInner<PSCustomObject>

.DESCRIPTION

Convert from JSON to AccessRolesGETInner<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AccessRolesGETInner<PSCustomObject>
#>
function ConvertFrom-PVEJsonToAccessRolesGETInner {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ProxmoxPVE => PVEAccessRolesGETInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PVEAccessRolesGETInner
        $AllProperties = ("privs", "roleid", "special")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "privs"))) { #optional property not found
            $Privs = $null
        } else {
            $Privs = $JsonParameters.PSobject.Properties["privs"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "roleid"))) { #optional property not found
            $Roleid = $null
        } else {
            $Roleid = $JsonParameters.PSobject.Properties["roleid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "special"))) { #optional property not found
            $Special = $null
        } else {
            $Special = $JsonParameters.PSobject.Properties["special"].value
        }

        $PSO = [PSCustomObject]@{
            "privs" = ${Privs}
            "roleid" = ${Roleid}
            "special" = ${Special}
        }

        return $PSO
    }

}

