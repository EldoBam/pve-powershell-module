#
# Proxmox VE
# Generated module to access all Proxmox VE Api Endpoints
# Version: 0.5
# Contact: amna.wolf@gmail.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Tokenid
No description available.
.PARAMETER Comment
No description available.
.PARAMETER Expire
No description available.
.PARAMETER Privsep
No description available.
.OUTPUTS

AccessUsersTokenGETInner<PSCustomObject>
#>

function Initialize-PVEAccessUsersTokenGETInner {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("(?^:[A-Za-z][A-Za-z0-9\.\-_]+)")]
        [String]
        ${Tokenid},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Comment},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Expire},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Privsep}
    )

    Process {
        'Creating PSCustomObject: ProxmoxPVE => PVEAccessUsersTokenGETInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


		 $DisplayNameMapping =@{
			"Tokenid"="tokenid"; "Comment"="comment"; "Expire"="expire"; "Privsep"="privsep"
        }
		
		 $OBJ = @{}
		foreach($parameter in   $PSBoundParameters.Keys){
			#If Specifield map the Display name back
			$OBJ.($DisplayNameMapping.($parameter)) = $PSBoundParameters.$parameter
		}

		$PSO = [PSCustomObject]$OBJ


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AccessUsersTokenGETInner<PSCustomObject>

.DESCRIPTION

Convert from JSON to AccessUsersTokenGETInner<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AccessUsersTokenGETInner<PSCustomObject>
#>
function ConvertFrom-PVEJsonToAccessUsersTokenGETInner {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ProxmoxPVE => PVEAccessUsersTokenGETInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PVEAccessUsersTokenGETInner
        $AllProperties = ("tokenid", "comment", "expire", "privsep")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tokenid"))) { #optional property not found
            $Tokenid = $null
        } else {
            $Tokenid = $JsonParameters.PSobject.Properties["tokenid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "comment"))) { #optional property not found
            $Comment = $null
        } else {
            $Comment = $JsonParameters.PSobject.Properties["comment"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "expire"))) { #optional property not found
            $Expire = $null
        } else {
            $Expire = $JsonParameters.PSobject.Properties["expire"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "privsep"))) { #optional property not found
            $Privsep = $null
        } else {
            $Privsep = $JsonParameters.PSobject.Properties["privsep"].value
        }

        $PSO = [PSCustomObject]@{
            "tokenid" = ${Tokenid}
            "comment" = ${Comment}
            "expire" = ${Expire}
            "privsep" = ${Privsep}
        }

        return $PSO
    }

}

