#
# Proxmox PowerShell VE
# Generated module to access all Proxmox VE Api Endpoints. This module has been generated from the proxmox api description v. 8.4.0
# Version: 8.4.0
# Contact: mail@timo-wolf.de
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Delete
No description available.
.PARAMETER Enable
No description available.
.PARAMETER TcpFlagsLogLevel
No description available.
.PARAMETER NfConntrackTcpTimeoutSynRecv
No description available.
.PARAMETER ProtectionSynfloodBurst
No description available.
.PARAMETER ProtectionSynflood
No description available.
.PARAMETER Nosmurfs
No description available.
.PARAMETER LogLevelOut
No description available.
.PARAMETER NfConntrackHelpers
No description available.
.PARAMETER NfConntrackTcpTimeoutEstablished
No description available.
.PARAMETER Ndp
No description available.
.PARAMETER Digest
No description available.
.PARAMETER Tcpflags
No description available.
.PARAMETER LogLevelForward
No description available.
.PARAMETER NfConntrackMax
No description available.
.PARAMETER Nftables
No description available.
.PARAMETER LogLevelIn
No description available.
.PARAMETER NfConntrackAllowInvalid
No description available.
.PARAMETER SmurfLogLevel
No description available.
.PARAMETER LogNfConntrack
No description available.
.PARAMETER ProtectionSynfloodRate
No description available.
.OUTPUTS

PUTNodesFirewallOptionsRB<PSCustomObject>
#>

function Initialize-PVEPUTNodesFirewallOptionsRB {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Delete},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Enable},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("emerg", "alert", "crit", "err", "warning", "notice", "info", "debug", "nolog")]
        [String]
        ${TcpFlagsLogLevel},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${NfConntrackTcpTimeoutSynRecv},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ProtectionSynfloodBurst},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${ProtectionSynflood},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Nosmurfs},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("emerg", "alert", "crit", "err", "warning", "notice", "info", "debug", "nolog")]
        [String]
        ${LogLevelOut},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${NfConntrackHelpers},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${NfConntrackTcpTimeoutEstablished},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Ndp},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Digest},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Tcpflags},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("emerg", "alert", "crit", "err", "warning", "notice", "info", "debug", "nolog")]
        [String]
        ${LogLevelForward},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${NfConntrackMax},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Nftables},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("emerg", "alert", "crit", "err", "warning", "notice", "info", "debug", "nolog")]
        [String]
        ${LogLevelIn},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${NfConntrackAllowInvalid},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("emerg", "alert", "crit", "err", "warning", "notice", "info", "debug", "nolog")]
        [String]
        ${SmurfLogLevel},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${LogNfConntrack},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ProtectionSynfloodRate}
    )

    Process {
        'Creating PSCustomObject: ProxmoxPVE => PVEPUTNodesFirewallOptionsRB' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($NfConntrackTcpTimeoutSynRecv -and $NfConntrackTcpTimeoutSynRecv -gt 60) {
          throw "invalid value for 'NfConntrackTcpTimeoutSynRecv', must be smaller than or equal to 60."
        }

        if ($NfConntrackTcpTimeoutSynRecv -and $NfConntrackTcpTimeoutSynRecv -lt 30) {
          throw "invalid value for 'NfConntrackTcpTimeoutSynRecv', must be greater than or equal to 30."
        }

        if ($NfConntrackTcpTimeoutEstablished -and $NfConntrackTcpTimeoutEstablished -lt 7875) {
          throw "invalid value for 'NfConntrackTcpTimeoutEstablished', must be greater than or equal to 7875."
        }

        if (!$Digest -and $Digest.length -gt 64) {
            throw "invalid value for 'Digest', the character length must be smaller than or equal to 64."
        }

        if ($NfConntrackMax -and $NfConntrackMax -lt 32768) {
          throw "invalid value for 'NfConntrackMax', must be greater than or equal to 32768."
        }


		 $DisplayNameMapping =@{
			"Delete"="delete"; "Enable"="enable"; "TcpFlagsLogLevel"="tcp_flags_log_level"; "NfConntrackTcpTimeoutSynRecv"="nf_conntrack_tcp_timeout_syn_recv"; "ProtectionSynfloodBurst"="protection_synflood_burst"; "ProtectionSynflood"="protection_synflood"; "Nosmurfs"="nosmurfs"; "LogLevelOut"="log_level_out"; "NfConntrackHelpers"="nf_conntrack_helpers"; "NfConntrackTcpTimeoutEstablished"="nf_conntrack_tcp_timeout_established"; "Ndp"="ndp"; "Digest"="digest"; "Tcpflags"="tcpflags"; "LogLevelForward"="log_level_forward"; "NfConntrackMax"="nf_conntrack_max"; "Nftables"="nftables"; "LogLevelIn"="log_level_in"; "NfConntrackAllowInvalid"="nf_conntrack_allow_invalid"; "SmurfLogLevel"="smurf_log_level"; "LogNfConntrack"="log_nf_conntrack"; "ProtectionSynfloodRate"="protection_synflood_rate"
        }
		
		 $OBJ = @{}
		foreach($parameter in   $PSBoundParameters.Keys){
			#If Specifield map the Display name back
			$OBJ.($DisplayNameMapping.($parameter)) = $PSBoundParameters.$parameter
		}

		$PSO = [PSCustomObject]$OBJ


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PUTNodesFirewallOptionsRB<PSCustomObject>

.DESCRIPTION

Convert from JSON to PUTNodesFirewallOptionsRB<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PUTNodesFirewallOptionsRB<PSCustomObject>
#>
function ConvertFrom-PVEJsonToPUTNodesFirewallOptionsRB {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ProxmoxPVE => PVEPUTNodesFirewallOptionsRB' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PVEPUTNodesFirewallOptionsRB
        $AllProperties = ("delete", "enable", "tcp_flags_log_level", "nf_conntrack_tcp_timeout_syn_recv", "protection_synflood_burst", "protection_synflood", "nosmurfs", "log_level_out", "nf_conntrack_helpers", "nf_conntrack_tcp_timeout_established", "ndp", "digest", "tcpflags", "log_level_forward", "nf_conntrack_max", "nftables", "log_level_in", "nf_conntrack_allow_invalid", "smurf_log_level", "log_nf_conntrack", "protection_synflood_rate")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "delete"))) { #optional property not found
            $Delete = $null
        } else {
            $Delete = $JsonParameters.PSobject.Properties["delete"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enable"))) { #optional property not found
            $Enable = $null
        } else {
            $Enable = $JsonParameters.PSobject.Properties["enable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tcp_flags_log_level"))) { #optional property not found
            $TcpFlagsLogLevel = $null
        } else {
            $TcpFlagsLogLevel = $JsonParameters.PSobject.Properties["tcp_flags_log_level"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nf_conntrack_tcp_timeout_syn_recv"))) { #optional property not found
            $NfConntrackTcpTimeoutSynRecv = $null
        } else {
            $NfConntrackTcpTimeoutSynRecv = $JsonParameters.PSobject.Properties["nf_conntrack_tcp_timeout_syn_recv"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "protection_synflood_burst"))) { #optional property not found
            $ProtectionSynfloodBurst = $null
        } else {
            $ProtectionSynfloodBurst = $JsonParameters.PSobject.Properties["protection_synflood_burst"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "protection_synflood"))) { #optional property not found
            $ProtectionSynflood = $null
        } else {
            $ProtectionSynflood = $JsonParameters.PSobject.Properties["protection_synflood"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nosmurfs"))) { #optional property not found
            $Nosmurfs = $null
        } else {
            $Nosmurfs = $JsonParameters.PSobject.Properties["nosmurfs"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "log_level_out"))) { #optional property not found
            $LogLevelOut = $null
        } else {
            $LogLevelOut = $JsonParameters.PSobject.Properties["log_level_out"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nf_conntrack_helpers"))) { #optional property not found
            $NfConntrackHelpers = $null
        } else {
            $NfConntrackHelpers = $JsonParameters.PSobject.Properties["nf_conntrack_helpers"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nf_conntrack_tcp_timeout_established"))) { #optional property not found
            $NfConntrackTcpTimeoutEstablished = $null
        } else {
            $NfConntrackTcpTimeoutEstablished = $JsonParameters.PSobject.Properties["nf_conntrack_tcp_timeout_established"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ndp"))) { #optional property not found
            $Ndp = $null
        } else {
            $Ndp = $JsonParameters.PSobject.Properties["ndp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "digest"))) { #optional property not found
            $Digest = $null
        } else {
            $Digest = $JsonParameters.PSobject.Properties["digest"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tcpflags"))) { #optional property not found
            $Tcpflags = $null
        } else {
            $Tcpflags = $JsonParameters.PSobject.Properties["tcpflags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "log_level_forward"))) { #optional property not found
            $LogLevelForward = $null
        } else {
            $LogLevelForward = $JsonParameters.PSobject.Properties["log_level_forward"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nf_conntrack_max"))) { #optional property not found
            $NfConntrackMax = $null
        } else {
            $NfConntrackMax = $JsonParameters.PSobject.Properties["nf_conntrack_max"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nftables"))) { #optional property not found
            $Nftables = $null
        } else {
            $Nftables = $JsonParameters.PSobject.Properties["nftables"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "log_level_in"))) { #optional property not found
            $LogLevelIn = $null
        } else {
            $LogLevelIn = $JsonParameters.PSobject.Properties["log_level_in"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nf_conntrack_allow_invalid"))) { #optional property not found
            $NfConntrackAllowInvalid = $null
        } else {
            $NfConntrackAllowInvalid = $JsonParameters.PSobject.Properties["nf_conntrack_allow_invalid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "smurf_log_level"))) { #optional property not found
            $SmurfLogLevel = $null
        } else {
            $SmurfLogLevel = $JsonParameters.PSobject.Properties["smurf_log_level"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "log_nf_conntrack"))) { #optional property not found
            $LogNfConntrack = $null
        } else {
            $LogNfConntrack = $JsonParameters.PSobject.Properties["log_nf_conntrack"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "protection_synflood_rate"))) { #optional property not found
            $ProtectionSynfloodRate = $null
        } else {
            $ProtectionSynfloodRate = $JsonParameters.PSobject.Properties["protection_synflood_rate"].value
        }

        $PSO = [PSCustomObject]@{
            "delete" = ${Delete}
            "enable" = ${Enable}
            "tcp_flags_log_level" = ${TcpFlagsLogLevel}
            "nf_conntrack_tcp_timeout_syn_recv" = ${NfConntrackTcpTimeoutSynRecv}
            "protection_synflood_burst" = ${ProtectionSynfloodBurst}
            "protection_synflood" = ${ProtectionSynflood}
            "nosmurfs" = ${Nosmurfs}
            "log_level_out" = ${LogLevelOut}
            "nf_conntrack_helpers" = ${NfConntrackHelpers}
            "nf_conntrack_tcp_timeout_established" = ${NfConntrackTcpTimeoutEstablished}
            "ndp" = ${Ndp}
            "digest" = ${Digest}
            "tcpflags" = ${Tcpflags}
            "log_level_forward" = ${LogLevelForward}
            "nf_conntrack_max" = ${NfConntrackMax}
            "nftables" = ${Nftables}
            "log_level_in" = ${LogLevelIn}
            "nf_conntrack_allow_invalid" = ${NfConntrackAllowInvalid}
            "smurf_log_level" = ${SmurfLogLevel}
            "log_nf_conntrack" = ${LogNfConntrack}
            "protection_synflood_rate" = ${ProtectionSynfloodRate}
        }

        return $PSO
    }

}

