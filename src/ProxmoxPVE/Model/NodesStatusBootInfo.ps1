#
# Proxmox VE
# Generated module to access all Proxmox VE Api Endpoints
# Version: 0.6
# Contact: amna.wolf@gmail.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Mode
Through which firmware the system got booted.
.PARAMETER Secureboot
System is booted in secure mode, only applicable for the ""efi"" mode.
.OUTPUTS

NodesStatusBootInfo<PSCustomObject>
#>

function Initialize-PVENodesStatusBootInfo {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("efi", "legacy-bios")]
        [String]
        ${Mode},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Secureboot}
    )

    Process {
        'Creating PSCustomObject: ProxmoxPVE => PVENodesStatusBootInfo' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


		 $DisplayNameMapping =@{
			"Mode"="mode"; "Secureboot"="secureboot"
        }
		
		 $OBJ = @{}
		foreach($parameter in   $PSBoundParameters.Keys){
			#If Specifield map the Display name back
			$OBJ.($DisplayNameMapping.($parameter)) = $PSBoundParameters.$parameter
		}

		$PSO = [PSCustomObject]$OBJ


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NodesStatusBootInfo<PSCustomObject>

.DESCRIPTION

Convert from JSON to NodesStatusBootInfo<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NodesStatusBootInfo<PSCustomObject>
#>
function ConvertFrom-PVEJsonToNodesStatusBootInfo {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ProxmoxPVE => PVENodesStatusBootInfo' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PVENodesStatusBootInfo
        $AllProperties = ("mode", "secureboot")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mode"))) { #optional property not found
            $Mode = $null
        } else {
            $Mode = $JsonParameters.PSobject.Properties["mode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "secureboot"))) { #optional property not found
            $Secureboot = $null
        } else {
            $Secureboot = $JsonParameters.PSobject.Properties["secureboot"].value
        }

        $PSO = [PSCustomObject]@{
            "mode" = ${Mode}
            "secureboot" = ${Secureboot}
        }

        return $PSO
    }

}

