#
# Proxmox VE
# Generated module to access all Proxmox VE Api Endpoints
# Version: 0.2
# Contact: 
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Value
No description available.
.PARAMETER Name
No description available.
.PARAMETER Description
No description available.
.OUTPUTS

ClusterCephFlagsInner<PSCustomObject>
#>

function Initialize-PVEClusterCephFlagsInner {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Value},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("nobackfill", "nodeep-scrub", "nodown", "noin", "noout", "norebalance", "norecover", "noscrub", "notieragent", "noup", "pause")]
        [String]
        ${Name},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description}
    )

    Process {
        'Creating PSCustomObject: ProxmoxPVE => PVEClusterCephFlagsInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($Value -and $Value -gt 1) {
          throw "invalid value for 'Value', must be smaller than or equal to 1."
        }

        if ($Value -and $Value -lt 0) {
          throw "invalid value for 'Value', must be greater than or equal to 0."
        }


		 $DisplayNameMapping =@{
			"Value"="value"; "Name"="name"; "Description"="description"
        }
		
		 $OBJ = @{}
		foreach($parameter in   $PSBoundParameters.Keys){
			#If Specifield map the Display name back
			$OBJ.($DisplayNameMapping.($parameter)) = "$PSBoundParameters.$parameter"
		}

		$PSO = [PSCustomObject]$OBJ


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ClusterCephFlagsInner<PSCustomObject>

.DESCRIPTION

Convert from JSON to ClusterCephFlagsInner<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ClusterCephFlagsInner<PSCustomObject>
#>
function ConvertFrom-PVEJsonToClusterCephFlagsInner {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ProxmoxPVE => PVEClusterCephFlagsInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PVEClusterCephFlagsInner
        $AllProperties = ("value", "name", "description")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "value"))) { #optional property not found
            $Value = $null
        } else {
            $Value = $JsonParameters.PSobject.Properties["value"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        $PSO = [PSCustomObject]@{
            "value" = ${Value}
            "name" = ${Name}
            "description" = ${Description}
        }

        return $PSO
    }

}

