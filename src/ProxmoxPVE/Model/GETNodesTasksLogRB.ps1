#
# Proxmox VE Module 1.0
# Generated OpenApiDescription to render Modules via OpenapiGenerator
# Version: 0.1
# Contact: 
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Start
No description available.
.PARAMETER Upid
No description available.
.PARAMETER Download
No description available.
.PARAMETER Limit
No description available.
.PARAMETER Node
No description available.
.OUTPUTS

GETNodesTasksLogRB<PSCustomObject>
#>

function Initialize-PVEGETNodesTasksLogRB {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Start},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Upid},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Download},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Node}
    )

    Process {
        'Creating PSCustomObject: ProxmoxPVE => PVEGETNodesTasksLogRB' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($Download -and $Download -gt 1) {
          throw "invalid value for 'Download', must be smaller than or equal to 1."
        }

        if ($Download -and $Download -lt 0) {
          throw "invalid value for 'Download', must be greater than or equal to 0."
        }


		 $DisplayNameMapping =@{
			"Start"="start"; "Upid"="upid"; "Download"="download"; "Limit"="limit"; "Node"="node"
        }
		
		 $OBJ = @{}
		foreach($parameter in   $PSBoundParameters.Keys){
			#If Specifield map the Display name back
			$OBJ.($DisplayNameMapping.($parameter)) = "$PSBoundParameters.$parameter"
		}

		$PSO = [PSCustomObject]$OBJ


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GETNodesTasksLogRB<PSCustomObject>

.DESCRIPTION

Convert from JSON to GETNodesTasksLogRB<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GETNodesTasksLogRB<PSCustomObject>
#>
function ConvertFrom-PVEJsonToGETNodesTasksLogRB {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ProxmoxPVE => PVEGETNodesTasksLogRB' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PVEGETNodesTasksLogRB
        $AllProperties = ("start", "upid", "download", "limit", "node")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "start"))) { #optional property not found
            $Start = $null
        } else {
            $Start = $JsonParameters.PSobject.Properties["start"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "upid"))) { #optional property not found
            $Upid = $null
        } else {
            $Upid = $JsonParameters.PSobject.Properties["upid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "download"))) { #optional property not found
            $Download = $null
        } else {
            $Download = $JsonParameters.PSobject.Properties["download"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "limit"))) { #optional property not found
            $Limit = $null
        } else {
            $Limit = $JsonParameters.PSobject.Properties["limit"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "node"))) { #optional property not found
            $Node = $null
        } else {
            $Node = $JsonParameters.PSobject.Properties["node"].value
        }

        $PSO = [PSCustomObject]@{
            "start" = ${Start}
            "upid" = ${Upid}
            "download" = ${Download}
            "limit" = ${Limit}
            "node" = ${Node}
        }

        return $PSO
    }

}

