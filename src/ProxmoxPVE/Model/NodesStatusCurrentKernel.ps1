#
# Proxmox VE
# Generated module to access all Proxmox VE Api Endpoints
# Version: 0.3
# Contact: amna.wolf@gmail.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Machine
Hardware (architecture) type
.PARAMETER Release
OS kernel release (e.g., ""6.8.0"")
.PARAMETER Sysname
OS kernel name (e.g., ""Linux"")
.PARAMETER Version
OS kernel version with build info
.OUTPUTS

NodesStatusCurrentKernel<PSCustomObject>
#>

function Initialize-PVENodesStatusCurrentKernel {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Machine},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Release},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Sysname},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Version}
    )

    Process {
        'Creating PSCustomObject: ProxmoxPVE => PVENodesStatusCurrentKernel' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


		 $DisplayNameMapping =@{
			"Machine"="machine"; "Release"="release"; "Sysname"="sysname"; "Version"="version"
        }
		
		 $OBJ = @{}
		foreach($parameter in   $PSBoundParameters.Keys){
			#If Specifield map the Display name back
			$OBJ.($DisplayNameMapping.($parameter)) = "$PSBoundParameters.$parameter"
		}

		$PSO = [PSCustomObject]$OBJ


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NodesStatusCurrentKernel<PSCustomObject>

.DESCRIPTION

Convert from JSON to NodesStatusCurrentKernel<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NodesStatusCurrentKernel<PSCustomObject>
#>
function ConvertFrom-PVEJsonToNodesStatusCurrentKernel {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ProxmoxPVE => PVENodesStatusCurrentKernel' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PVENodesStatusCurrentKernel
        $AllProperties = ("machine", "release", "sysname", "version")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "machine"))) { #optional property not found
            $Machine = $null
        } else {
            $Machine = $JsonParameters.PSobject.Properties["machine"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "release"))) { #optional property not found
            $Release = $null
        } else {
            $Release = $JsonParameters.PSobject.Properties["release"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sysname"))) { #optional property not found
            $Sysname = $null
        } else {
            $Sysname = $JsonParameters.PSobject.Properties["sysname"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "version"))) { #optional property not found
            $Version = $null
        } else {
            $Version = $JsonParameters.PSobject.Properties["version"].value
        }

        $PSO = [PSCustomObject]@{
            "machine" = ${Machine}
            "release" = ${Release}
            "sysname" = ${Sysname}
            "version" = ${Version}
        }

        return $PSO
    }

}

