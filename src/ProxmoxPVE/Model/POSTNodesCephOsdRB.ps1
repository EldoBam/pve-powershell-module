#
# Proxmox PowerShell VE
# Generated module to access all Proxmox VE Api Endpoints. This module has been generated from the proxmox api description v. 8.4.0
# Version: 8.4.0
# Contact: mail@timo-wolf.de
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER OsdsPerDevice
No description available.
.PARAMETER Encrypted
No description available.
.PARAMETER WalDev
No description available.
.PARAMETER CrushDeviceClass
No description available.
.PARAMETER WalDevSize
No description available.
.PARAMETER DbDev
No description available.
.PARAMETER DbDevSize
No description available.
.PARAMETER Dev
No description available.
.OUTPUTS

POSTNodesCephOsdRB<PSCustomObject>
#>

function Initialize-PVEPOSTNodesCephOsdRB {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${OsdsPerDevice},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Encrypted},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${WalDev},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CrushDeviceClass},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${WalDevSize},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DbDev},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${DbDevSize},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Dev}
    )

    Process {
        'Creating PSCustomObject: ProxmoxPVE => PVEPOSTNodesCephOsdRB' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($WalDevSize -and $WalDevSize -lt 0.5) {
          throw "invalid value for 'WalDevSize', must be greater than or equal to 0.5."
        }

        if ($DbDevSize -and $DbDevSize -lt 1) {
          throw "invalid value for 'DbDevSize', must be greater than or equal to 1."
        }


		 $DisplayNameMapping =@{
			"OsdsPerDevice"="osds-per-device"; "Encrypted"="encrypted"; "WalDev"="wal_dev"; "CrushDeviceClass"="crush-device-class"; "WalDevSize"="wal_dev_size"; "DbDev"="db_dev"; "DbDevSize"="db_dev_size"; "Dev"="dev"
        }
		
		 $OBJ = @{}
		foreach($parameter in   $PSBoundParameters.Keys){
			#If Specifield map the Display name back
			$OBJ.($DisplayNameMapping.($parameter)) = $PSBoundParameters.$parameter
		}

		$PSO = [PSCustomObject]$OBJ


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to POSTNodesCephOsdRB<PSCustomObject>

.DESCRIPTION

Convert from JSON to POSTNodesCephOsdRB<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

POSTNodesCephOsdRB<PSCustomObject>
#>
function ConvertFrom-PVEJsonToPOSTNodesCephOsdRB {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ProxmoxPVE => PVEPOSTNodesCephOsdRB' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PVEPOSTNodesCephOsdRB
        $AllProperties = ("osds-per-device", "encrypted", "wal_dev", "crush-device-class", "wal_dev_size", "db_dev", "db_dev_size", "dev")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "osds-per-device"))) { #optional property not found
            $OsdsPerDevice = $null
        } else {
            $OsdsPerDevice = $JsonParameters.PSobject.Properties["osds-per-device"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "encrypted"))) { #optional property not found
            $Encrypted = $null
        } else {
            $Encrypted = $JsonParameters.PSobject.Properties["encrypted"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "wal_dev"))) { #optional property not found
            $WalDev = $null
        } else {
            $WalDev = $JsonParameters.PSobject.Properties["wal_dev"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "crush-device-class"))) { #optional property not found
            $CrushDeviceClass = $null
        } else {
            $CrushDeviceClass = $JsonParameters.PSobject.Properties["crush-device-class"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "wal_dev_size"))) { #optional property not found
            $WalDevSize = $null
        } else {
            $WalDevSize = $JsonParameters.PSobject.Properties["wal_dev_size"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "db_dev"))) { #optional property not found
            $DbDev = $null
        } else {
            $DbDev = $JsonParameters.PSobject.Properties["db_dev"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "db_dev_size"))) { #optional property not found
            $DbDevSize = $null
        } else {
            $DbDevSize = $JsonParameters.PSobject.Properties["db_dev_size"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dev"))) { #optional property not found
            $Dev = $null
        } else {
            $Dev = $JsonParameters.PSobject.Properties["dev"].value
        }

        $PSO = [PSCustomObject]@{
            "osds-per-device" = ${OsdsPerDevice}
            "encrypted" = ${Encrypted}
            "wal_dev" = ${WalDev}
            "crush-device-class" = ${CrushDeviceClass}
            "wal_dev_size" = ${WalDevSize}
            "db_dev" = ${DbDev}
            "db_dev_size" = ${DbDevSize}
            "dev" = ${Dev}
        }

        return $PSO
    }

}

