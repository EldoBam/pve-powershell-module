#
# Proxmox VE
# Generated module to access all Proxmox VE Api Endpoints
# Version: 0.2
# Contact: 
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Comment
No description available.
.PARAMETER Expire
API token expiration date (seconds since epoch). '0' means no expiration date.
.PARAMETER Privsep
Restrict API token privileges with separate ACLs (default), or give full privileges of corresponding user.
.OUTPUTS

AccessUsersTokens<PSCustomObject>
#>

function Initialize-PVEAccessUsersTokens {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Comment},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Expire},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Privsep} = $false
    )

    Process {
        'Creating PSCustomObject: ProxmoxPVE => PVEAccessUsersTokens' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($Expire -and $Expire -lt 0) {
          throw "invalid value for 'Expire', must be greater than or equal to 0."
        }


		 $DisplayNameMapping =@{
			"Comment"="comment"; "Expire"="expire"; "Privsep"="privsep"
        }
		
		 $OBJ = @{}
		foreach($parameter in   $PSBoundParameters.Keys){
			#If Specifield map the Display name back
			$OBJ.($DisplayNameMapping.($parameter)) = "$PSBoundParameters.$parameter"
		}

		$PSO = [PSCustomObject]$OBJ


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AccessUsersTokens<PSCustomObject>

.DESCRIPTION

Convert from JSON to AccessUsersTokens<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AccessUsersTokens<PSCustomObject>
#>
function ConvertFrom-PVEJsonToAccessUsersTokens {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ProxmoxPVE => PVEAccessUsersTokens' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PVEAccessUsersTokens
        $AllProperties = ("comment", "expire", "privsep")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "comment"))) { #optional property not found
            $Comment = $null
        } else {
            $Comment = $JsonParameters.PSobject.Properties["comment"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "expire"))) { #optional property not found
            $Expire = $null
        } else {
            $Expire = $JsonParameters.PSobject.Properties["expire"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "privsep"))) { #optional property not found
            $Privsep = $null
        } else {
            $Privsep = $JsonParameters.PSobject.Properties["privsep"].value
        }

        $PSO = [PSCustomObject]@{
            "comment" = ${Comment}
            "expire" = ${Expire}
            "privsep" = ${Privsep}
        }

        return $PSO
    }

}

