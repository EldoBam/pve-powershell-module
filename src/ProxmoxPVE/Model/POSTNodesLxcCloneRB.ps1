#
# Proxmox PowerShell VE
# Generated module to access all Proxmox VE Api Endpoints. This module has been generated from the proxmox api description v. 8.4.0
# Version: 8.4.0
# Contact: mail@timo-wolf.de
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Pool
No description available.
.PARAMETER Storage
No description available.
.PARAMETER Newid
No description available.
.PARAMETER Target
No description available.
.PARAMETER Snapname
No description available.
.PARAMETER Description
No description available.
.PARAMETER Full
No description available.
.PARAMETER Bwlimit
No description available.
.PARAMETER Hostname
No description available.
.OUTPUTS

POSTNodesLxcCloneRB<PSCustomObject>
#>

function Initialize-PVEPOSTNodesLxcCloneRB {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Pool},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Storage},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Newid},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Target},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Snapname},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Full},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${Bwlimit},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Hostname}
    )

    Process {
        'Creating PSCustomObject: ProxmoxPVE => PVEPOSTNodesLxcCloneRB' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($Newid -and $Newid -gt 999999999) {
          throw "invalid value for 'Newid', must be smaller than or equal to 999999999."
        }

        if ($Newid -and $Newid -lt 100) {
          throw "invalid value for 'Newid', must be greater than or equal to 100."
        }

        if (!$Snapname -and $Snapname.length -gt 40) {
            throw "invalid value for 'Snapname', the character length must be smaller than or equal to 40."
        }


		 $DisplayNameMapping =@{
			"Pool"="pool"; "Storage"="storage"; "Newid"="newid"; "Target"="target"; "Snapname"="snapname"; "Description"="description"; "Full"="full"; "Bwlimit"="bwlimit"; "Hostname"="hostname"
        }
		
		 $OBJ = @{}
		foreach($parameter in   $PSBoundParameters.Keys){
			#If Specifield map the Display name back
			$OBJ.($DisplayNameMapping.($parameter)) = $PSBoundParameters.$parameter
		}

		$PSO = [PSCustomObject]$OBJ


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to POSTNodesLxcCloneRB<PSCustomObject>

.DESCRIPTION

Convert from JSON to POSTNodesLxcCloneRB<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

POSTNodesLxcCloneRB<PSCustomObject>
#>
function ConvertFrom-PVEJsonToPOSTNodesLxcCloneRB {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ProxmoxPVE => PVEPOSTNodesLxcCloneRB' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PVEPOSTNodesLxcCloneRB
        $AllProperties = ("pool", "storage", "newid", "target", "snapname", "description", "full", "bwlimit", "hostname")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pool"))) { #optional property not found
            $Pool = $null
        } else {
            $Pool = $JsonParameters.PSobject.Properties["pool"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "storage"))) { #optional property not found
            $Storage = $null
        } else {
            $Storage = $JsonParameters.PSobject.Properties["storage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "newid"))) { #optional property not found
            $Newid = $null
        } else {
            $Newid = $JsonParameters.PSobject.Properties["newid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "target"))) { #optional property not found
            $Target = $null
        } else {
            $Target = $JsonParameters.PSobject.Properties["target"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "snapname"))) { #optional property not found
            $Snapname = $null
        } else {
            $Snapname = $JsonParameters.PSobject.Properties["snapname"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "full"))) { #optional property not found
            $Full = $null
        } else {
            $Full = $JsonParameters.PSobject.Properties["full"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bwlimit"))) { #optional property not found
            $Bwlimit = $null
        } else {
            $Bwlimit = $JsonParameters.PSobject.Properties["bwlimit"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hostname"))) { #optional property not found
            $Hostname = $null
        } else {
            $Hostname = $JsonParameters.PSobject.Properties["hostname"].value
        }

        $PSO = [PSCustomObject]@{
            "pool" = ${Pool}
            "storage" = ${Storage}
            "newid" = ${Newid}
            "target" = ${Target}
            "snapname" = ${Snapname}
            "description" = ${Description}
            "full" = ${Full}
            "bwlimit" = ${Bwlimit}
            "hostname" = ${Hostname}
        }

        return $PSO
    }

}

