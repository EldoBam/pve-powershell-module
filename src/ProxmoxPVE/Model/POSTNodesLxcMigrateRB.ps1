#
# Proxmox PowerShell VE
# Generated module to access all Proxmox VE Api Endpoints. This module has been generated from the proxmox api description v. 8.4.0
# Version: 8.4.0
# Contact: mail@timo-wolf.de
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Restart
No description available.
.PARAMETER Timeout
No description available.
.PARAMETER Target
No description available.
.PARAMETER Bwlimit
No description available.
.PARAMETER TargetStorage
No description available.
.PARAMETER Online
No description available.
.OUTPUTS

POSTNodesLxcMigrateRB<PSCustomObject>
#>

function Initialize-PVEPOSTNodesLxcMigrateRB {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Restart},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Timeout},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Target},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${Bwlimit},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TargetStorage},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Online}
    )

    Process {
        'Creating PSCustomObject: ProxmoxPVE => PVEPOSTNodesLxcMigrateRB' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


		 $DisplayNameMapping =@{
			"Restart"="restart"; "Timeout"="timeout"; "Target"="target"; "Bwlimit"="bwlimit"; "TargetStorage"="target-storage"; "Online"="online"
        }
		
		 $OBJ = @{}
		foreach($parameter in   $PSBoundParameters.Keys){
			#If Specifield map the Display name back
			$OBJ.($DisplayNameMapping.($parameter)) = $PSBoundParameters.$parameter
		}

		$PSO = [PSCustomObject]$OBJ


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to POSTNodesLxcMigrateRB<PSCustomObject>

.DESCRIPTION

Convert from JSON to POSTNodesLxcMigrateRB<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

POSTNodesLxcMigrateRB<PSCustomObject>
#>
function ConvertFrom-PVEJsonToPOSTNodesLxcMigrateRB {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ProxmoxPVE => PVEPOSTNodesLxcMigrateRB' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PVEPOSTNodesLxcMigrateRB
        $AllProperties = ("restart", "timeout", "target", "bwlimit", "target-storage", "online")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "restart"))) { #optional property not found
            $Restart = $null
        } else {
            $Restart = $JsonParameters.PSobject.Properties["restart"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timeout"))) { #optional property not found
            $Timeout = $null
        } else {
            $Timeout = $JsonParameters.PSobject.Properties["timeout"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "target"))) { #optional property not found
            $Target = $null
        } else {
            $Target = $JsonParameters.PSobject.Properties["target"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bwlimit"))) { #optional property not found
            $Bwlimit = $null
        } else {
            $Bwlimit = $JsonParameters.PSobject.Properties["bwlimit"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "target-storage"))) { #optional property not found
            $TargetStorage = $null
        } else {
            $TargetStorage = $JsonParameters.PSobject.Properties["target-storage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "online"))) { #optional property not found
            $Online = $null
        } else {
            $Online = $JsonParameters.PSobject.Properties["online"].value
        }

        $PSO = [PSCustomObject]@{
            "restart" = ${Restart}
            "timeout" = ${Timeout}
            "target" = ${Target}
            "bwlimit" = ${Bwlimit}
            "target-storage" = ${TargetStorage}
            "online" = ${Online}
        }

        return $PSO
    }

}

