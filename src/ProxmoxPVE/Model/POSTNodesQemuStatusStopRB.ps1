#
# Proxmox VE
# Generated module to access all Proxmox VE Api Endpoints
# Version: 0.6
# Contact: amna.wolf@gmail.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Skiplock
No description available.
.PARAMETER KeepActive
No description available.
.PARAMETER OverruleShutdown
No description available.
.PARAMETER Timeout
No description available.
.PARAMETER Migratedfrom
No description available.
.OUTPUTS

POSTNodesQemuStatusStopRB<PSCustomObject>
#>

function Initialize-PVEPOSTNodesQemuStatusStopRB {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Skiplock},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${KeepActive},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${OverruleShutdown},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Timeout},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Migratedfrom}
    )

    Process {
        'Creating PSCustomObject: ProxmoxPVE => PVEPOSTNodesQemuStatusStopRB' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


		 $DisplayNameMapping =@{
			"Skiplock"="skiplock"; "KeepActive"="keepActive"; "OverruleShutdown"="overrule-shutdown"; "Timeout"="timeout"; "Migratedfrom"="migratedfrom"
        }
		
		 $OBJ = @{}
		foreach($parameter in   $PSBoundParameters.Keys){
			#If Specifield map the Display name back
			$OBJ.($DisplayNameMapping.($parameter)) = $PSBoundParameters.$parameter
		}

		$PSO = [PSCustomObject]$OBJ


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to POSTNodesQemuStatusStopRB<PSCustomObject>

.DESCRIPTION

Convert from JSON to POSTNodesQemuStatusStopRB<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

POSTNodesQemuStatusStopRB<PSCustomObject>
#>
function ConvertFrom-PVEJsonToPOSTNodesQemuStatusStopRB {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ProxmoxPVE => PVEPOSTNodesQemuStatusStopRB' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PVEPOSTNodesQemuStatusStopRB
        $AllProperties = ("skiplock", "keepActive", "overrule-shutdown", "timeout", "migratedfrom")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "skiplock"))) { #optional property not found
            $Skiplock = $null
        } else {
            $Skiplock = $JsonParameters.PSobject.Properties["skiplock"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "keepActive"))) { #optional property not found
            $KeepActive = $null
        } else {
            $KeepActive = $JsonParameters.PSobject.Properties["keepActive"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "overrule-shutdown"))) { #optional property not found
            $OverruleShutdown = $null
        } else {
            $OverruleShutdown = $JsonParameters.PSobject.Properties["overrule-shutdown"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timeout"))) { #optional property not found
            $Timeout = $null
        } else {
            $Timeout = $JsonParameters.PSobject.Properties["timeout"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "migratedfrom"))) { #optional property not found
            $Migratedfrom = $null
        } else {
            $Migratedfrom = $JsonParameters.PSobject.Properties["migratedfrom"].value
        }

        $PSO = [PSCustomObject]@{
            "skiplock" = ${Skiplock}
            "keepActive" = ${KeepActive}
            "overrule-shutdown" = ${OverruleShutdown}
            "timeout" = ${Timeout}
            "migratedfrom" = ${Migratedfrom}
        }

        return $PSO
    }

}

