#
# Proxmox VE Module 1.0
# Generated OpenApiDescription to render Modules via OpenapiGenerator
# Version: 0.1
# Contact: 
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER SubsystemVendor
No description available.
.PARAMETER Vendor
No description available.
.PARAMETER Class
No description available.
.PARAMETER SubsystemDevice
No description available.
.PARAMETER SubsystemDeviceName
No description available.
.PARAMETER Device
No description available.
.PARAMETER Mdev
No description available.
.PARAMETER VendorName
No description available.
.PARAMETER SubsystemVendorName
No description available.
.PARAMETER Iommugroup
No description available.
.PARAMETER DeviceName
No description available.
.PARAMETER Id
No description available.
.OUTPUTS

NodesHardwarePciInner<PSCustomObject>
#>

function Initialize-PVENodesHardwarePciInner {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SubsystemVendor},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Vendor},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Class},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SubsystemDevice},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SubsystemDeviceName},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Device},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Mdev},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VendorName},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SubsystemVendorName},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Iommugroup},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DeviceName},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id}
    )

    Process {
        'Creating PSCustomObject: ProxmoxPVE => PVENodesHardwarePciInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($Mdev -and $Mdev -gt 1) {
          throw "invalid value for 'Mdev', must be smaller than or equal to 1."
        }

        if ($Mdev -and $Mdev -lt 0) {
          throw "invalid value for 'Mdev', must be greater than or equal to 0."
        }


		 $DisplayNameMapping =@{
			"SubsystemVendor"="subsystem_vendor"; "Vendor"="vendor"; "Class"="class"; "SubsystemDevice"="subsystem_device"; "SubsystemDeviceName"="subsystem_device_name"; "Device"="device"; "Mdev"="mdev"; "VendorName"="vendor_name"; "SubsystemVendorName"="subsystem_vendor_name"; "Iommugroup"="iommugroup"; "DeviceName"="device_name"; "Id"="id"
        }
		
		 $OBJ = @{}
		foreach($parameter in   $PSBoundParameters.Keys){
			#If Specifield map the Display name back
			$OBJ.($DisplayNameMapping.($parameter)) = "$PSBoundParameters.$parameter"
		}

		$PSO = [PSCustomObject]$OBJ


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NodesHardwarePciInner<PSCustomObject>

.DESCRIPTION

Convert from JSON to NodesHardwarePciInner<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NodesHardwarePciInner<PSCustomObject>
#>
function ConvertFrom-PVEJsonToNodesHardwarePciInner {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ProxmoxPVE => PVENodesHardwarePciInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PVENodesHardwarePciInner
        $AllProperties = ("subsystem_vendor", "vendor", "class", "subsystem_device", "subsystem_device_name", "device", "mdev", "vendor_name", "subsystem_vendor_name", "iommugroup", "device_name", "id")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subsystem_vendor"))) { #optional property not found
            $SubsystemVendor = $null
        } else {
            $SubsystemVendor = $JsonParameters.PSobject.Properties["subsystem_vendor"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vendor"))) { #optional property not found
            $Vendor = $null
        } else {
            $Vendor = $JsonParameters.PSobject.Properties["vendor"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "class"))) { #optional property not found
            $Class = $null
        } else {
            $Class = $JsonParameters.PSobject.Properties["class"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subsystem_device"))) { #optional property not found
            $SubsystemDevice = $null
        } else {
            $SubsystemDevice = $JsonParameters.PSobject.Properties["subsystem_device"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subsystem_device_name"))) { #optional property not found
            $SubsystemDeviceName = $null
        } else {
            $SubsystemDeviceName = $JsonParameters.PSobject.Properties["subsystem_device_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "device"))) { #optional property not found
            $Device = $null
        } else {
            $Device = $JsonParameters.PSobject.Properties["device"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mdev"))) { #optional property not found
            $Mdev = $null
        } else {
            $Mdev = $JsonParameters.PSobject.Properties["mdev"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vendor_name"))) { #optional property not found
            $VendorName = $null
        } else {
            $VendorName = $JsonParameters.PSobject.Properties["vendor_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subsystem_vendor_name"))) { #optional property not found
            $SubsystemVendorName = $null
        } else {
            $SubsystemVendorName = $JsonParameters.PSobject.Properties["subsystem_vendor_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "iommugroup"))) { #optional property not found
            $Iommugroup = $null
        } else {
            $Iommugroup = $JsonParameters.PSobject.Properties["iommugroup"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "device_name"))) { #optional property not found
            $DeviceName = $null
        } else {
            $DeviceName = $JsonParameters.PSobject.Properties["device_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        $PSO = [PSCustomObject]@{
            "subsystem_vendor" = ${SubsystemVendor}
            "vendor" = ${Vendor}
            "class" = ${Class}
            "subsystem_device" = ${SubsystemDevice}
            "subsystem_device_name" = ${SubsystemDeviceName}
            "device" = ${Device}
            "mdev" = ${Mdev}
            "vendor_name" = ${VendorName}
            "subsystem_vendor_name" = ${SubsystemVendorName}
            "iommugroup" = ${Iommugroup}
            "device_name" = ${DeviceName}
            "id" = ${Id}
        }

        return $PSO
    }

}

