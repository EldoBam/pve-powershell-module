#
# Proxmox VE
# Generated module to access all Proxmox VE Api Endpoints
# Version: 0.2
# Contact: 
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Digest
No description available.
.PARAMETER Nomatch
No description available.
.PARAMETER Cidr
No description available.
.PARAMETER Comment
No description available.
.OUTPUTS

ClusterFirewallIpsetGETInner<PSCustomObject>
#>

function Initialize-PVEClusterFirewallIpsetGETInner {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Digest},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Nomatch},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Cidr},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Comment}
    )

    Process {
        'Creating PSCustomObject: ProxmoxPVE => PVEClusterFirewallIpsetGETInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Digest -and $Digest.length -gt 64) {
            throw "invalid value for 'Digest', the character length must be smaller than or equal to 64."
        }

        if ($Nomatch -and $Nomatch -gt 1) {
          throw "invalid value for 'Nomatch', must be smaller than or equal to 1."
        }

        if ($Nomatch -and $Nomatch -lt 0) {
          throw "invalid value for 'Nomatch', must be greater than or equal to 0."
        }


		 $DisplayNameMapping =@{
			"Digest"="digest"; "Nomatch"="nomatch"; "Cidr"="cidr"; "Comment"="comment"
        }
		
		 $OBJ = @{}
		foreach($parameter in   $PSBoundParameters.Keys){
			#If Specifield map the Display name back
			$OBJ.($DisplayNameMapping.($parameter)) = "$PSBoundParameters.$parameter"
		}

		$PSO = [PSCustomObject]$OBJ


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ClusterFirewallIpsetGETInner<PSCustomObject>

.DESCRIPTION

Convert from JSON to ClusterFirewallIpsetGETInner<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ClusterFirewallIpsetGETInner<PSCustomObject>
#>
function ConvertFrom-PVEJsonToClusterFirewallIpsetGETInner {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ProxmoxPVE => PVEClusterFirewallIpsetGETInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PVEClusterFirewallIpsetGETInner
        $AllProperties = ("digest", "nomatch", "cidr", "comment")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "digest"))) { #optional property not found
            $Digest = $null
        } else {
            $Digest = $JsonParameters.PSobject.Properties["digest"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nomatch"))) { #optional property not found
            $Nomatch = $null
        } else {
            $Nomatch = $JsonParameters.PSobject.Properties["nomatch"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cidr"))) { #optional property not found
            $Cidr = $null
        } else {
            $Cidr = $JsonParameters.PSobject.Properties["cidr"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "comment"))) { #optional property not found
            $Comment = $null
        } else {
            $Comment = $JsonParameters.PSobject.Properties["comment"].value
        }

        $PSO = [PSCustomObject]@{
            "digest" = ${Digest}
            "nomatch" = ${Nomatch}
            "cidr" = ${Cidr}
            "comment" = ${Comment}
        }

        return $PSO
    }

}

