#
# Proxmox VE Module 1.0
# Generated OpenApiDescription to render Modules via OpenapiGenerator
# Version: 0.1
# Contact: 
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Snapname
No description available.
.PARAMETER Description
No description available.
.PARAMETER Vmid
No description available.
.PARAMETER Vmstate
No description available.
.PARAMETER Node
No description available.
.OUTPUTS

POSTNodesQemuSnapshotRB<PSCustomObject>
#>

function Initialize-PVEPOSTNodesQemuSnapshotRB {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Snapname},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Vmid},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Vmstate},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Node}
    )

    Process {
        'Creating PSCustomObject: ProxmoxPVE => PVEPOSTNodesQemuSnapshotRB' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Snapname -and $Snapname.length -gt 40) {
            throw "invalid value for 'Snapname', the character length must be smaller than or equal to 40."
        }

        if ($Vmid -and $Vmid -gt 999999999) {
          throw "invalid value for 'Vmid', must be smaller than or equal to 999999999."
        }

        if ($Vmid -and $Vmid -lt 100) {
          throw "invalid value for 'Vmid', must be greater than or equal to 100."
        }

        if ($Vmstate -and $Vmstate -gt 1) {
          throw "invalid value for 'Vmstate', must be smaller than or equal to 1."
        }

        if ($Vmstate -and $Vmstate -lt 0) {
          throw "invalid value for 'Vmstate', must be greater than or equal to 0."
        }


		 $DisplayNameMapping =@{
			"Snapname"="snapname"; "Description"="description"; "Vmid"="vmid"; "Vmstate"="vmstate"; "Node"="node"
        }
		
		 $OBJ = @{}
		foreach($parameter in   $PSBoundParameters.Keys){
			#If Specifield map the Display name back
			$OBJ.($DisplayNameMapping.($parameter)) = "$PSBoundParameters.$parameter"
		}

		$PSO = [PSCustomObject]$OBJ


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to POSTNodesQemuSnapshotRB<PSCustomObject>

.DESCRIPTION

Convert from JSON to POSTNodesQemuSnapshotRB<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

POSTNodesQemuSnapshotRB<PSCustomObject>
#>
function ConvertFrom-PVEJsonToPOSTNodesQemuSnapshotRB {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ProxmoxPVE => PVEPOSTNodesQemuSnapshotRB' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PVEPOSTNodesQemuSnapshotRB
        $AllProperties = ("snapname", "description", "vmid", "vmstate", "node")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "snapname"))) { #optional property not found
            $Snapname = $null
        } else {
            $Snapname = $JsonParameters.PSobject.Properties["snapname"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vmid"))) { #optional property not found
            $Vmid = $null
        } else {
            $Vmid = $JsonParameters.PSobject.Properties["vmid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vmstate"))) { #optional property not found
            $Vmstate = $null
        } else {
            $Vmstate = $JsonParameters.PSobject.Properties["vmstate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "node"))) { #optional property not found
            $Node = $null
        } else {
            $Node = $JsonParameters.PSobject.Properties["node"].value
        }

        $PSO = [PSCustomObject]@{
            "snapname" = ${Snapname}
            "description" = ${Description}
            "vmid" = ${Vmid}
            "vmstate" = ${Vmstate}
            "node" = ${Node}
        }

        return $PSO
    }

}

