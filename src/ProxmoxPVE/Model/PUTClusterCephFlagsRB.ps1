#
# Proxmox VE
# Generated module to access all Proxmox VE Api Endpoints
# Version: 0.3
# Contact: amna.wolf@gmail.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Value
No description available.
.PARAMETER Flag
No description available.
.OUTPUTS

PUTClusterCephFlagsRB<PSCustomObject>
#>

function Initialize-PVEPUTClusterCephFlagsRB {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Value},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("nobackfill", "nodeep-scrub", "nodown", "noin", "noout", "norebalance", "norecover", "noscrub", "notieragent", "noup", "pause")]
        [String]
        ${Flag}
    )

    Process {
        'Creating PSCustomObject: ProxmoxPVE => PVEPUTClusterCephFlagsRB' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($Value -and $Value -gt 1) {
          throw "invalid value for 'Value', must be smaller than or equal to 1."
        }

        if ($Value -and $Value -lt 0) {
          throw "invalid value for 'Value', must be greater than or equal to 0."
        }


		 $DisplayNameMapping =@{
			"Value"="value"; "Flag"="flag"
        }
		
		 $OBJ = @{}
		foreach($parameter in   $PSBoundParameters.Keys){
			#If Specifield map the Display name back
			$OBJ.($DisplayNameMapping.($parameter)) = "$PSBoundParameters.$parameter"
		}

		$PSO = [PSCustomObject]$OBJ


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PUTClusterCephFlagsRB<PSCustomObject>

.DESCRIPTION

Convert from JSON to PUTClusterCephFlagsRB<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PUTClusterCephFlagsRB<PSCustomObject>
#>
function ConvertFrom-PVEJsonToPUTClusterCephFlagsRB {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ProxmoxPVE => PVEPUTClusterCephFlagsRB' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PVEPUTClusterCephFlagsRB
        $AllProperties = ("value", "flag")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "value"))) { #optional property not found
            $Value = $null
        } else {
            $Value = $JsonParameters.PSobject.Properties["value"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "flag"))) { #optional property not found
            $Flag = $null
        } else {
            $Flag = $JsonParameters.PSobject.Properties["flag"].value
        }

        $PSO = [PSCustomObject]@{
            "value" = ${Value}
            "flag" = ${Flag}
        }

        return $PSO
    }

}

