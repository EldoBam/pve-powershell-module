#
# Proxmox PowerShell VE
# Generated module to access all Proxmox VE Api Endpoints. This module has been generated from the proxmox api description v. 8.4.0
# Version: 8.4.0
# Contact: mail@timo-wolf.de
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Type
No description available.
.PARAMETER Version
No description available.
.PARAMETER Id
No description available.
.PARAMETER Changes
No description available.
.OUTPUTS

NodesCapabilitiesQemuMachinesInner<PSCustomObject>
#>

function Initialize-PVENodesCapabilitiesQemuMachinesInner {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("q35", "i440fx")]
        [String]
        ${Type},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Version},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Changes}
    )

    Process {
        'Creating PSCustomObject: ProxmoxPVE => PVENodesCapabilitiesQemuMachinesInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


		 $DisplayNameMapping =@{
			"Type"="type"; "Version"="version"; "Id"="id"; "Changes"="changes"
        }
		
		 $OBJ = @{}
		foreach($parameter in   $PSBoundParameters.Keys){
			#If Specifield map the Display name back
			$OBJ.($DisplayNameMapping.($parameter)) = $PSBoundParameters.$parameter
		}

		$PSO = [PSCustomObject]$OBJ


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NodesCapabilitiesQemuMachinesInner<PSCustomObject>

.DESCRIPTION

Convert from JSON to NodesCapabilitiesQemuMachinesInner<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NodesCapabilitiesQemuMachinesInner<PSCustomObject>
#>
function ConvertFrom-PVEJsonToNodesCapabilitiesQemuMachinesInner {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ProxmoxPVE => PVENodesCapabilitiesQemuMachinesInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PVENodesCapabilitiesQemuMachinesInner
        $AllProperties = ("type", "version", "id", "changes")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "version"))) { #optional property not found
            $Version = $null
        } else {
            $Version = $JsonParameters.PSobject.Properties["version"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "changes"))) { #optional property not found
            $Changes = $null
        } else {
            $Changes = $JsonParameters.PSobject.Properties["changes"].value
        }

        $PSO = [PSCustomObject]@{
            "type" = ${Type}
            "version" = ${Version}
            "id" = ${Id}
            "changes" = ${Changes}
        }

        return $PSO
    }

}

