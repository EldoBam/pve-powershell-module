#
# Proxmox VE
# Generated module to access all Proxmox VE Api Endpoints
# Version: 0.6
# Contact: amna.wolf@gmail.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ProtectionSynfloodBurst
No description available.
.PARAMETER NfConntrackMax
No description available.
.PARAMETER Ndp
No description available.
.PARAMETER NfConntrackHelpers
No description available.
.PARAMETER NfConntrackAllowInvalid
No description available.
.PARAMETER SmurfLogLevel
No description available.
.PARAMETER TcpFlagsLogLevel
No description available.
.PARAMETER Tcpflags
No description available.
.PARAMETER NfConntrackTcpTimeoutEstablished
No description available.
.PARAMETER ProtectionSynfloodRate
No description available.
.PARAMETER Enable
No description available.
.PARAMETER Nosmurfs
No description available.
.PARAMETER Nftables
No description available.
.PARAMETER LogLevelOut
No description available.
.PARAMETER LogNfConntrack
No description available.
.PARAMETER LogLevelForward
No description available.
.PARAMETER NfConntrackTcpTimeoutSynRecv
No description available.
.PARAMETER LogLevelIn
No description available.
.PARAMETER ProtectionSynflood
No description available.
.OUTPUTS

NodesFirewallOptions<PSCustomObject>
#>

function Initialize-PVENodesFirewallOptions {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ProtectionSynfloodBurst},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${NfConntrackMax},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Ndp},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${NfConntrackHelpers},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${NfConntrackAllowInvalid},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("emerg", "alert", "crit", "err", "warning", "notice", "info", "debug", "nolog")]
        [String]
        ${SmurfLogLevel},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("emerg", "alert", "crit", "err", "warning", "notice", "info", "debug", "nolog")]
        [String]
        ${TcpFlagsLogLevel},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Tcpflags},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${NfConntrackTcpTimeoutEstablished},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ProtectionSynfloodRate},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Enable},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Nosmurfs},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Nftables},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("emerg", "alert", "crit", "err", "warning", "notice", "info", "debug", "nolog")]
        [String]
        ${LogLevelOut},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${LogNfConntrack},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("emerg", "alert", "crit", "err", "warning", "notice", "info", "debug", "nolog")]
        [String]
        ${LogLevelForward},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${NfConntrackTcpTimeoutSynRecv},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("emerg", "alert", "crit", "err", "warning", "notice", "info", "debug", "nolog")]
        [String]
        ${LogLevelIn},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${ProtectionSynflood}
    )

    Process {
        'Creating PSCustomObject: ProxmoxPVE => PVENodesFirewallOptions' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($NfConntrackMax -and $NfConntrackMax -lt 32768) {
          throw "invalid value for 'NfConntrackMax', must be greater than or equal to 32768."
        }

        if ($NfConntrackTcpTimeoutEstablished -and $NfConntrackTcpTimeoutEstablished -lt 7875) {
          throw "invalid value for 'NfConntrackTcpTimeoutEstablished', must be greater than or equal to 7875."
        }

        if ($NfConntrackTcpTimeoutSynRecv -and $NfConntrackTcpTimeoutSynRecv -gt 60) {
          throw "invalid value for 'NfConntrackTcpTimeoutSynRecv', must be smaller than or equal to 60."
        }

        if ($NfConntrackTcpTimeoutSynRecv -and $NfConntrackTcpTimeoutSynRecv -lt 30) {
          throw "invalid value for 'NfConntrackTcpTimeoutSynRecv', must be greater than or equal to 30."
        }


		 $DisplayNameMapping =@{
			"ProtectionSynfloodBurst"="protection_synflood_burst"; "NfConntrackMax"="nf_conntrack_max"; "Ndp"="ndp"; "NfConntrackHelpers"="nf_conntrack_helpers"; "NfConntrackAllowInvalid"="nf_conntrack_allow_invalid"; "SmurfLogLevel"="smurf_log_level"; "TcpFlagsLogLevel"="tcp_flags_log_level"; "Tcpflags"="tcpflags"; "NfConntrackTcpTimeoutEstablished"="nf_conntrack_tcp_timeout_established"; "ProtectionSynfloodRate"="protection_synflood_rate"; "Enable"="enable"; "Nosmurfs"="nosmurfs"; "Nftables"="nftables"; "LogLevelOut"="log_level_out"; "LogNfConntrack"="log_nf_conntrack"; "LogLevelForward"="log_level_forward"; "NfConntrackTcpTimeoutSynRecv"="nf_conntrack_tcp_timeout_syn_recv"; "LogLevelIn"="log_level_in"; "ProtectionSynflood"="protection_synflood"
        }
		
		 $OBJ = @{}
		foreach($parameter in   $PSBoundParameters.Keys){
			#If Specifield map the Display name back
			$OBJ.($DisplayNameMapping.($parameter)) = $PSBoundParameters.$parameter
		}

		$PSO = [PSCustomObject]$OBJ


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NodesFirewallOptions<PSCustomObject>

.DESCRIPTION

Convert from JSON to NodesFirewallOptions<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NodesFirewallOptions<PSCustomObject>
#>
function ConvertFrom-PVEJsonToNodesFirewallOptions {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ProxmoxPVE => PVENodesFirewallOptions' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PVENodesFirewallOptions
        $AllProperties = ("protection_synflood_burst", "nf_conntrack_max", "ndp", "nf_conntrack_helpers", "nf_conntrack_allow_invalid", "smurf_log_level", "tcp_flags_log_level", "tcpflags", "nf_conntrack_tcp_timeout_established", "protection_synflood_rate", "enable", "nosmurfs", "nftables", "log_level_out", "log_nf_conntrack", "log_level_forward", "nf_conntrack_tcp_timeout_syn_recv", "log_level_in", "protection_synflood")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "protection_synflood_burst"))) { #optional property not found
            $ProtectionSynfloodBurst = $null
        } else {
            $ProtectionSynfloodBurst = $JsonParameters.PSobject.Properties["protection_synflood_burst"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nf_conntrack_max"))) { #optional property not found
            $NfConntrackMax = $null
        } else {
            $NfConntrackMax = $JsonParameters.PSobject.Properties["nf_conntrack_max"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ndp"))) { #optional property not found
            $Ndp = $null
        } else {
            $Ndp = $JsonParameters.PSobject.Properties["ndp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nf_conntrack_helpers"))) { #optional property not found
            $NfConntrackHelpers = $null
        } else {
            $NfConntrackHelpers = $JsonParameters.PSobject.Properties["nf_conntrack_helpers"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nf_conntrack_allow_invalid"))) { #optional property not found
            $NfConntrackAllowInvalid = $null
        } else {
            $NfConntrackAllowInvalid = $JsonParameters.PSobject.Properties["nf_conntrack_allow_invalid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "smurf_log_level"))) { #optional property not found
            $SmurfLogLevel = $null
        } else {
            $SmurfLogLevel = $JsonParameters.PSobject.Properties["smurf_log_level"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tcp_flags_log_level"))) { #optional property not found
            $TcpFlagsLogLevel = $null
        } else {
            $TcpFlagsLogLevel = $JsonParameters.PSobject.Properties["tcp_flags_log_level"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tcpflags"))) { #optional property not found
            $Tcpflags = $null
        } else {
            $Tcpflags = $JsonParameters.PSobject.Properties["tcpflags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nf_conntrack_tcp_timeout_established"))) { #optional property not found
            $NfConntrackTcpTimeoutEstablished = $null
        } else {
            $NfConntrackTcpTimeoutEstablished = $JsonParameters.PSobject.Properties["nf_conntrack_tcp_timeout_established"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "protection_synflood_rate"))) { #optional property not found
            $ProtectionSynfloodRate = $null
        } else {
            $ProtectionSynfloodRate = $JsonParameters.PSobject.Properties["protection_synflood_rate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enable"))) { #optional property not found
            $Enable = $null
        } else {
            $Enable = $JsonParameters.PSobject.Properties["enable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nosmurfs"))) { #optional property not found
            $Nosmurfs = $null
        } else {
            $Nosmurfs = $JsonParameters.PSobject.Properties["nosmurfs"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nftables"))) { #optional property not found
            $Nftables = $null
        } else {
            $Nftables = $JsonParameters.PSobject.Properties["nftables"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "log_level_out"))) { #optional property not found
            $LogLevelOut = $null
        } else {
            $LogLevelOut = $JsonParameters.PSobject.Properties["log_level_out"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "log_nf_conntrack"))) { #optional property not found
            $LogNfConntrack = $null
        } else {
            $LogNfConntrack = $JsonParameters.PSobject.Properties["log_nf_conntrack"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "log_level_forward"))) { #optional property not found
            $LogLevelForward = $null
        } else {
            $LogLevelForward = $JsonParameters.PSobject.Properties["log_level_forward"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nf_conntrack_tcp_timeout_syn_recv"))) { #optional property not found
            $NfConntrackTcpTimeoutSynRecv = $null
        } else {
            $NfConntrackTcpTimeoutSynRecv = $JsonParameters.PSobject.Properties["nf_conntrack_tcp_timeout_syn_recv"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "log_level_in"))) { #optional property not found
            $LogLevelIn = $null
        } else {
            $LogLevelIn = $JsonParameters.PSobject.Properties["log_level_in"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "protection_synflood"))) { #optional property not found
            $ProtectionSynflood = $null
        } else {
            $ProtectionSynflood = $JsonParameters.PSobject.Properties["protection_synflood"].value
        }

        $PSO = [PSCustomObject]@{
            "protection_synflood_burst" = ${ProtectionSynfloodBurst}
            "nf_conntrack_max" = ${NfConntrackMax}
            "ndp" = ${Ndp}
            "nf_conntrack_helpers" = ${NfConntrackHelpers}
            "nf_conntrack_allow_invalid" = ${NfConntrackAllowInvalid}
            "smurf_log_level" = ${SmurfLogLevel}
            "tcp_flags_log_level" = ${TcpFlagsLogLevel}
            "tcpflags" = ${Tcpflags}
            "nf_conntrack_tcp_timeout_established" = ${NfConntrackTcpTimeoutEstablished}
            "protection_synflood_rate" = ${ProtectionSynfloodRate}
            "enable" = ${Enable}
            "nosmurfs" = ${Nosmurfs}
            "nftables" = ${Nftables}
            "log_level_out" = ${LogLevelOut}
            "log_nf_conntrack" = ${LogNfConntrack}
            "log_level_forward" = ${LogLevelForward}
            "nf_conntrack_tcp_timeout_syn_recv" = ${NfConntrackTcpTimeoutSynRecv}
            "log_level_in" = ${LogLevelIn}
            "protection_synflood" = ${ProtectionSynflood}
        }

        return $PSO
    }

}

