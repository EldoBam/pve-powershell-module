#
# Proxmox VE
# Generated module to access all Proxmox VE Api Endpoints
# Version: 0.5
# Contact: amna.wolf@gmail.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER BackAddr
Address and port used to talk to other OSDs.
.PARAMETER FrontAddr
Address and port used to talk to clients and monitors.
.PARAMETER HbBackAddr
Heartbeat address and port for other OSDs.
.PARAMETER HbFrontAddr
Heartbeat address and port for clients and monitors.
.PARAMETER Hostname
Name of the host containing the OSD.
.PARAMETER Id
ID of the OSD.
.PARAMETER MemUsage
Memory usage of the OSD service.
.PARAMETER OsdData
Path to the OSD's data directory.
.PARAMETER OsdObjectstore
The type of object store used.
.PARAMETER VarPid
OSD process ID.
.PARAMETER Version
Ceph version of the OSD service.
.OUTPUTS

NodesCephOsdMetadataOsd<PSCustomObject>
#>

function Initialize-PVENodesCephOsdMetadataOsd {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BackAddr},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FrontAddr},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${HbBackAddr},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${HbFrontAddr},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Hostname},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Id},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MemUsage},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OsdData},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OsdObjectstore},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${VarPid},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Version}
    )

    Process {
        'Creating PSCustomObject: ProxmoxPVE => PVENodesCephOsdMetadataOsd' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


		 $DisplayNameMapping =@{
			"BackAddr"="back_addr"; "FrontAddr"="front_addr"; "HbBackAddr"="hb_back_addr"; "HbFrontAddr"="hb_front_addr"; "Hostname"="hostname"; "Id"="id"; "MemUsage"="mem_usage"; "OsdData"="osd_data"; "OsdObjectstore"="osd_objectstore"; "VarPid"="pid"; "Version"="version"
        }
		
		 $OBJ = @{}
		foreach($parameter in   $PSBoundParameters.Keys){
			#If Specifield map the Display name back
			$OBJ.($DisplayNameMapping.($parameter)) = $PSBoundParameters.$parameter
		}

		$PSO = [PSCustomObject]$OBJ


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NodesCephOsdMetadataOsd<PSCustomObject>

.DESCRIPTION

Convert from JSON to NodesCephOsdMetadataOsd<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NodesCephOsdMetadataOsd<PSCustomObject>
#>
function ConvertFrom-PVEJsonToNodesCephOsdMetadataOsd {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ProxmoxPVE => PVENodesCephOsdMetadataOsd' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PVENodesCephOsdMetadataOsd
        $AllProperties = ("back_addr", "front_addr", "hb_back_addr", "hb_front_addr", "hostname", "id", "mem_usage", "osd_data", "osd_objectstore", "pid", "version")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "back_addr"))) { #optional property not found
            $BackAddr = $null
        } else {
            $BackAddr = $JsonParameters.PSobject.Properties["back_addr"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "front_addr"))) { #optional property not found
            $FrontAddr = $null
        } else {
            $FrontAddr = $JsonParameters.PSobject.Properties["front_addr"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hb_back_addr"))) { #optional property not found
            $HbBackAddr = $null
        } else {
            $HbBackAddr = $JsonParameters.PSobject.Properties["hb_back_addr"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hb_front_addr"))) { #optional property not found
            $HbFrontAddr = $null
        } else {
            $HbFrontAddr = $JsonParameters.PSobject.Properties["hb_front_addr"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hostname"))) { #optional property not found
            $Hostname = $null
        } else {
            $Hostname = $JsonParameters.PSobject.Properties["hostname"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mem_usage"))) { #optional property not found
            $MemUsage = $null
        } else {
            $MemUsage = $JsonParameters.PSobject.Properties["mem_usage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "osd_data"))) { #optional property not found
            $OsdData = $null
        } else {
            $OsdData = $JsonParameters.PSobject.Properties["osd_data"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "osd_objectstore"))) { #optional property not found
            $OsdObjectstore = $null
        } else {
            $OsdObjectstore = $JsonParameters.PSobject.Properties["osd_objectstore"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pid"))) { #optional property not found
            $VarPid = $null
        } else {
            $VarPid = $JsonParameters.PSobject.Properties["pid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "version"))) { #optional property not found
            $Version = $null
        } else {
            $Version = $JsonParameters.PSobject.Properties["version"].value
        }

        $PSO = [PSCustomObject]@{
            "back_addr" = ${BackAddr}
            "front_addr" = ${FrontAddr}
            "hb_back_addr" = ${HbBackAddr}
            "hb_front_addr" = ${HbFrontAddr}
            "hostname" = ${Hostname}
            "id" = ${Id}
            "mem_usage" = ${MemUsage}
            "osd_data" = ${OsdData}
            "osd_objectstore" = ${OsdObjectstore}
            "pid" = ${VarPid}
            "version" = ${Version}
        }

        return $PSO
    }

}

