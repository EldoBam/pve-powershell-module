#
# Proxmox PowerShell VE
# Generated module to access all Proxmox VE Api Endpoints. This module has been generated from the proxmox api description v. 8.4.0
# Version: 8.4.0
# Contact: mail@timo-wolf.de
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Localtime
No description available.
.PARAMETER Hugepages
No description available.
.PARAMETER Cipassword
No description available.
.PARAMETER Vmstatestorage
No description available.
.PARAMETER Tablet
No description available.
.PARAMETER Watchdog
No description available.
.PARAMETER UsbN
No description available.
.PARAMETER Bios
No description available.
.PARAMETER Reboot
No description available.
.PARAMETER Digest
No description available.
.PARAMETER SpiceEnhancements
No description available.
.PARAMETER Tags
No description available.
.PARAMETER Efidisk0
No description available.
.PARAMETER NumaN
No description available.
.PARAMETER IdeN
No description available.
.PARAMETER Audio0
No description available.
.PARAMETER Tpmstate0
No description available.
.PARAMETER Searchdomain
No description available.
.PARAMETER Machine
No description available.
.PARAMETER Cicustom
No description available.
.PARAMETER Cpuunits
No description available.
.PARAMETER Sockets
No description available.
.PARAMETER ScsiN
No description available.
.PARAMETER Vcpus
No description available.
.PARAMETER Cpu
No description available.
.PARAMETER Onboot
No description available.
.PARAMETER IpconfigN
No description available.
.PARAMETER Cdrom
No description available.
.PARAMETER Tdf
No description available.
.PARAMETER Autostart
No description available.
.PARAMETER UnusedN
No description available.
.PARAMETER Agent
No description available.
.PARAMETER Rng0
No description available.
.PARAMETER Freeze
No description available.
.PARAMETER Cpulimit
No description available.
.PARAMETER Name
No description available.
.PARAMETER Protection
No description available.
.PARAMETER Sshkeys
No description available.
.PARAMETER Affinity
No description available.
.PARAMETER NetN
No description available.
.PARAMETER SataN
No description available.
.PARAMETER Nameserver
No description available.
.PARAMETER VarArgs
No description available.
.PARAMETER Vmgenid
No description available.
.PARAMETER Kvm
No description available.
.PARAMETER Citype
No description available.
.PARAMETER Keephugepages
No description available.
.PARAMETER Numa
No description available.
.PARAMETER Template
No description available.
.PARAMETER Cores
No description available.
.PARAMETER HostpciN
No description available.
.PARAMETER Acpi
No description available.
.PARAMETER Ostype
No description available.
.PARAMETER Hotplug
No description available.
.PARAMETER VirtioN
No description available.
.PARAMETER MigrateDowntime
No description available.
.PARAMETER Vga
No description available.
.PARAMETER Boot
No description available.
.PARAMETER Bootdisk
No description available.
.PARAMETER Smp
No description available.
.PARAMETER Hookscript
No description available.
.PARAMETER Lock
No description available.
.PARAMETER AmdSev
No description available.
.PARAMETER Startup
No description available.
.PARAMETER Description
No description available.
.PARAMETER Balloon
No description available.
.PARAMETER Ciupgrade
No description available.
.PARAMETER MigrateSpeed
No description available.
.PARAMETER Shares
No description available.
.PARAMETER Ivshmem
No description available.
.PARAMETER SerialN
No description available.
.PARAMETER Keyboard
No description available.
.PARAMETER VirtiofsN
No description available.
.PARAMETER Arch
No description available.
.PARAMETER Ciuser
No description available.
.PARAMETER Smbios1
No description available.
.PARAMETER Scsihw
No description available.
.PARAMETER ParallelN
No description available.
.PARAMETER Memory
No description available.
.PARAMETER Startdate
No description available.
.OUTPUTS

NodesQemuConfig<PSCustomObject>
#>

function Initialize-PVENodesQemuConfig {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Localtime},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("any", "2", "1024")]
        [String]
        ${Hugepages},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Cipassword},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Vmstatestorage},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Tablet},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Watchdog},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UsbN},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("seabios", "ovmf")]
        [String]
        ${Bios},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Reboot},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Digest},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SpiceEnhancements},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Tags},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Efidisk0},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${NumaN},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IdeN},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Audio0},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Tpmstate0},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Searchdomain},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Machine},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Cicustom},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Cpuunits},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Sockets},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ScsiN},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Vcpus},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Cpu},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Onboot},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IpconfigN},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Cdrom},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Tdf},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Autostart},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UnusedN},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Agent},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Rng0},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Freeze},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${Cpulimit},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Protection},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Sshkeys},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Affinity},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${NetN},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SataN},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Nameserver},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VarArgs},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("(?:[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}|[01])")]
        [String]
        ${Vmgenid},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Kvm},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("configdrive2", "nocloud", "opennebula")]
        [String]
        ${Citype},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Keephugepages},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Numa},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Template},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Cores},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${HostpciN},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Acpi},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("other", "wxp", "w2k", "w2k3", "w2k8", "wvista", "win7", "win8", "win10", "win11", "l24", "l26", "solaris")]
        [String]
        ${Ostype},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Hotplug},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VirtioN},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${MigrateDowntime},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Vga},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Boot},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("(ide|sata|scsi|virtio)\d+")]
        [String]
        ${Bootdisk},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Smp},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Hookscript},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("backup", "clone", "create", "migrate", "rollback", "snapshot", "snapshot-delete", "suspending", "suspended")]
        [String]
        ${Lock},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AmdSev},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Startup},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Balloon},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Ciupgrade},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MigrateSpeed},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Shares},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Ivshmem},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("(/dev/.+|socket)")]
        [String]
        ${SerialN},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("de", "de-ch", "da", "en-gb", "en-us", "es", "fi", "fr", "fr-be", "fr-ca", "fr-ch", "hu", "is", "it", "ja", "lt", "mk", "nl", "no", "pl", "pt", "pt-br", "sv", "sl", "tr")]
        [String]
        ${Keyboard},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VirtiofsN},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("x86_64", "aarch64")]
        [String]
        ${Arch},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Ciuser},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Smbios1},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("lsi", "lsi53c810", "virtio-scsi-pci", "virtio-scsi-single", "megasas", "pvscsi")]
        [String]
        ${Scsihw},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("/dev/parport\d+|/dev/usb/lp\d+")]
        [String]
        ${ParallelN},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Memory},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("(now|\d{4}-\d{1,2}-\d{1,2}(T\d{1,2}:\d{1,2}:\d{1,2})?)")]
        [String]
        ${Startdate}
    )

    Process {
        'Creating PSCustomObject: ProxmoxPVE => PVENodesQemuConfig' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($Cpuunits -and $Cpuunits -gt 262144) {
          throw "invalid value for 'Cpuunits', must be smaller than or equal to 262144."
        }

        if ($Cpuunits -and $Cpuunits -lt 1) {
          throw "invalid value for 'Cpuunits', must be greater than or equal to 1."
        }

        if ($Sockets -and $Sockets -lt 1) {
          throw "invalid value for 'Sockets', must be greater than or equal to 1."
        }

        if ($Vcpus -and $Vcpus -lt 1) {
          throw "invalid value for 'Vcpus', must be greater than or equal to 1."
        }

        if ($Cpulimit -and $Cpulimit -gt 128) {
          throw "invalid value for 'Cpulimit', must be smaller than or equal to 128."
        }

        if ($Cores -and $Cores -lt 1) {
          throw "invalid value for 'Cores', must be greater than or equal to 1."
        }

        if ($Smp -and $Smp -lt 1) {
          throw "invalid value for 'Smp', must be greater than or equal to 1."
        }

        if (!$Description -and $Description.length -gt 8192) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 8192."
        }

        if ($Shares -and $Shares -gt 50000) {
          throw "invalid value for 'Shares', must be smaller than or equal to 50000."
        }

        if (!$Smbios1 -and $Smbios1.length -gt 512) {
            throw "invalid value for 'Smbios1', the character length must be smaller than or equal to 512."
        }


		 $DisplayNameMapping =@{
			"Localtime"="localtime"; "Hugepages"="hugepages"; "Cipassword"="cipassword"; "Vmstatestorage"="vmstatestorage"; "Tablet"="tablet"; "Watchdog"="watchdog"; "UsbN"="usb[n]"; "Bios"="bios"; "Reboot"="reboot"; "Digest"="digest"; "SpiceEnhancements"="spice_enhancements"; "Tags"="tags"; "Efidisk0"="efidisk0"; "NumaN"="numa[n]"; "IdeN"="ide[n]"; "Audio0"="audio0"; "Tpmstate0"="tpmstate0"; "Searchdomain"="searchdomain"; "Machine"="machine"; "Cicustom"="cicustom"; "Cpuunits"="cpuunits"; "Sockets"="sockets"; "ScsiN"="scsi[n]"; "Vcpus"="vcpus"; "Cpu"="cpu"; "Onboot"="onboot"; "IpconfigN"="ipconfig[n]"; "Cdrom"="cdrom"; "Tdf"="tdf"; "Autostart"="autostart"; "UnusedN"="unused[n]"; "Agent"="agent"; "Rng0"="rng0"; "Freeze"="freeze"; "Cpulimit"="cpulimit"; "Name"="name"; "Protection"="protection"; "Sshkeys"="sshkeys"; "Affinity"="affinity"; "NetN"="net[n]"; "SataN"="sata[n]"; "Nameserver"="nameserver"; "VarArgs"="args"; "Vmgenid"="vmgenid"; "Kvm"="kvm"; "Citype"="citype"; "Keephugepages"="keephugepages"; "Numa"="numa"; "Template"="template"; "Cores"="cores"; "HostpciN"="hostpci[n]"; "Acpi"="acpi"; "Ostype"="ostype"; "Hotplug"="hotplug"; "VirtioN"="virtio[n]"; "MigrateDowntime"="migrate_downtime"; "Vga"="vga"; "Boot"="boot"; "Bootdisk"="bootdisk"; "Smp"="smp"; "Hookscript"="hookscript"; "Lock"="lock"; "AmdSev"="amd-sev"; "Startup"="startup"; "Description"="description"; "Balloon"="balloon"; "Ciupgrade"="ciupgrade"; "MigrateSpeed"="migrate_speed"; "Shares"="shares"; "Ivshmem"="ivshmem"; "SerialN"="serial[n]"; "Keyboard"="keyboard"; "VirtiofsN"="virtiofs[n]"; "Arch"="arch"; "Ciuser"="ciuser"; "Smbios1"="smbios1"; "Scsihw"="scsihw"; "ParallelN"="parallel[n]"; "Memory"="memory"; "Startdate"="startdate"
        }
		
		 $OBJ = @{}
		foreach($parameter in   $PSBoundParameters.Keys){
			#If Specifield map the Display name back
			$OBJ.($DisplayNameMapping.($parameter)) = $PSBoundParameters.$parameter
		}

		$PSO = [PSCustomObject]$OBJ


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NodesQemuConfig<PSCustomObject>

.DESCRIPTION

Convert from JSON to NodesQemuConfig<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NodesQemuConfig<PSCustomObject>
#>
function ConvertFrom-PVEJsonToNodesQemuConfig {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ProxmoxPVE => PVENodesQemuConfig' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PVENodesQemuConfig
        $AllProperties = ("localtime", "hugepages", "cipassword", "vmstatestorage", "tablet", "watchdog", "usb[n]", "bios", "reboot", "digest", "spice_enhancements", "tags", "efidisk0", "numa[n]", "ide[n]", "audio0", "tpmstate0", "searchdomain", "machine", "cicustom", "cpuunits", "sockets", "scsi[n]", "vcpus", "cpu", "onboot", "ipconfig[n]", "cdrom", "tdf", "autostart", "unused[n]", "agent", "rng0", "freeze", "cpulimit", "name", "protection", "sshkeys", "affinity", "net[n]", "sata[n]", "nameserver", "args", "vmgenid", "kvm", "citype", "keephugepages", "numa", "template", "cores", "hostpci[n]", "acpi", "ostype", "hotplug", "virtio[n]", "migrate_downtime", "vga", "boot", "bootdisk", "smp", "hookscript", "lock", "amd-sev", "startup", "description", "balloon", "ciupgrade", "migrate_speed", "shares", "ivshmem", "serial[n]", "keyboard", "virtiofs[n]", "arch", "ciuser", "smbios1", "scsihw", "parallel[n]", "memory", "startdate")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "localtime"))) { #optional property not found
            $Localtime = $null
        } else {
            $Localtime = $JsonParameters.PSobject.Properties["localtime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hugepages"))) { #optional property not found
            $Hugepages = $null
        } else {
            $Hugepages = $JsonParameters.PSobject.Properties["hugepages"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cipassword"))) { #optional property not found
            $Cipassword = $null
        } else {
            $Cipassword = $JsonParameters.PSobject.Properties["cipassword"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vmstatestorage"))) { #optional property not found
            $Vmstatestorage = $null
        } else {
            $Vmstatestorage = $JsonParameters.PSobject.Properties["vmstatestorage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tablet"))) { #optional property not found
            $Tablet = $null
        } else {
            $Tablet = $JsonParameters.PSobject.Properties["tablet"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "watchdog"))) { #optional property not found
            $Watchdog = $null
        } else {
            $Watchdog = $JsonParameters.PSobject.Properties["watchdog"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "usb[n]"))) { #optional property not found
            $UsbN = $null
        } else {
            $UsbN = $JsonParameters.PSobject.Properties["usb[n]"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bios"))) { #optional property not found
            $Bios = $null
        } else {
            $Bios = $JsonParameters.PSobject.Properties["bios"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "reboot"))) { #optional property not found
            $Reboot = $null
        } else {
            $Reboot = $JsonParameters.PSobject.Properties["reboot"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "digest"))) { #optional property not found
            $Digest = $null
        } else {
            $Digest = $JsonParameters.PSobject.Properties["digest"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "spice_enhancements"))) { #optional property not found
            $SpiceEnhancements = $null
        } else {
            $SpiceEnhancements = $JsonParameters.PSobject.Properties["spice_enhancements"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tags"))) { #optional property not found
            $Tags = $null
        } else {
            $Tags = $JsonParameters.PSobject.Properties["tags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "efidisk0"))) { #optional property not found
            $Efidisk0 = $null
        } else {
            $Efidisk0 = $JsonParameters.PSobject.Properties["efidisk0"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "numa[n]"))) { #optional property not found
            $NumaN = $null
        } else {
            $NumaN = $JsonParameters.PSobject.Properties["numa[n]"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ide[n]"))) { #optional property not found
            $IdeN = $null
        } else {
            $IdeN = $JsonParameters.PSobject.Properties["ide[n]"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "audio0"))) { #optional property not found
            $Audio0 = $null
        } else {
            $Audio0 = $JsonParameters.PSobject.Properties["audio0"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tpmstate0"))) { #optional property not found
            $Tpmstate0 = $null
        } else {
            $Tpmstate0 = $JsonParameters.PSobject.Properties["tpmstate0"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "searchdomain"))) { #optional property not found
            $Searchdomain = $null
        } else {
            $Searchdomain = $JsonParameters.PSobject.Properties["searchdomain"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "machine"))) { #optional property not found
            $Machine = $null
        } else {
            $Machine = $JsonParameters.PSobject.Properties["machine"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cicustom"))) { #optional property not found
            $Cicustom = $null
        } else {
            $Cicustom = $JsonParameters.PSobject.Properties["cicustom"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cpuunits"))) { #optional property not found
            $Cpuunits = $null
        } else {
            $Cpuunits = $JsonParameters.PSobject.Properties["cpuunits"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sockets"))) { #optional property not found
            $Sockets = $null
        } else {
            $Sockets = $JsonParameters.PSobject.Properties["sockets"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "scsi[n]"))) { #optional property not found
            $ScsiN = $null
        } else {
            $ScsiN = $JsonParameters.PSobject.Properties["scsi[n]"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vcpus"))) { #optional property not found
            $Vcpus = $null
        } else {
            $Vcpus = $JsonParameters.PSobject.Properties["vcpus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cpu"))) { #optional property not found
            $Cpu = $null
        } else {
            $Cpu = $JsonParameters.PSobject.Properties["cpu"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "onboot"))) { #optional property not found
            $Onboot = $null
        } else {
            $Onboot = $JsonParameters.PSobject.Properties["onboot"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ipconfig[n]"))) { #optional property not found
            $IpconfigN = $null
        } else {
            $IpconfigN = $JsonParameters.PSobject.Properties["ipconfig[n]"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cdrom"))) { #optional property not found
            $Cdrom = $null
        } else {
            $Cdrom = $JsonParameters.PSobject.Properties["cdrom"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tdf"))) { #optional property not found
            $Tdf = $null
        } else {
            $Tdf = $JsonParameters.PSobject.Properties["tdf"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "autostart"))) { #optional property not found
            $Autostart = $null
        } else {
            $Autostart = $JsonParameters.PSobject.Properties["autostart"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "unused[n]"))) { #optional property not found
            $UnusedN = $null
        } else {
            $UnusedN = $JsonParameters.PSobject.Properties["unused[n]"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "agent"))) { #optional property not found
            $Agent = $null
        } else {
            $Agent = $JsonParameters.PSobject.Properties["agent"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rng0"))) { #optional property not found
            $Rng0 = $null
        } else {
            $Rng0 = $JsonParameters.PSobject.Properties["rng0"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "freeze"))) { #optional property not found
            $Freeze = $null
        } else {
            $Freeze = $JsonParameters.PSobject.Properties["freeze"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cpulimit"))) { #optional property not found
            $Cpulimit = $null
        } else {
            $Cpulimit = $JsonParameters.PSobject.Properties["cpulimit"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "protection"))) { #optional property not found
            $Protection = $null
        } else {
            $Protection = $JsonParameters.PSobject.Properties["protection"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sshkeys"))) { #optional property not found
            $Sshkeys = $null
        } else {
            $Sshkeys = $JsonParameters.PSobject.Properties["sshkeys"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "affinity"))) { #optional property not found
            $Affinity = $null
        } else {
            $Affinity = $JsonParameters.PSobject.Properties["affinity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "net[n]"))) { #optional property not found
            $NetN = $null
        } else {
            $NetN = $JsonParameters.PSobject.Properties["net[n]"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sata[n]"))) { #optional property not found
            $SataN = $null
        } else {
            $SataN = $JsonParameters.PSobject.Properties["sata[n]"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nameserver"))) { #optional property not found
            $Nameserver = $null
        } else {
            $Nameserver = $JsonParameters.PSobject.Properties["nameserver"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "args"))) { #optional property not found
            $VarArgs = $null
        } else {
            $VarArgs = $JsonParameters.PSobject.Properties["args"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vmgenid"))) { #optional property not found
            $Vmgenid = $null
        } else {
            $Vmgenid = $JsonParameters.PSobject.Properties["vmgenid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "kvm"))) { #optional property not found
            $Kvm = $null
        } else {
            $Kvm = $JsonParameters.PSobject.Properties["kvm"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "citype"))) { #optional property not found
            $Citype = $null
        } else {
            $Citype = $JsonParameters.PSobject.Properties["citype"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "keephugepages"))) { #optional property not found
            $Keephugepages = $null
        } else {
            $Keephugepages = $JsonParameters.PSobject.Properties["keephugepages"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "numa"))) { #optional property not found
            $Numa = $null
        } else {
            $Numa = $JsonParameters.PSobject.Properties["numa"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "template"))) { #optional property not found
            $Template = $null
        } else {
            $Template = $JsonParameters.PSobject.Properties["template"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cores"))) { #optional property not found
            $Cores = $null
        } else {
            $Cores = $JsonParameters.PSobject.Properties["cores"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hostpci[n]"))) { #optional property not found
            $HostpciN = $null
        } else {
            $HostpciN = $JsonParameters.PSobject.Properties["hostpci[n]"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "acpi"))) { #optional property not found
            $Acpi = $null
        } else {
            $Acpi = $JsonParameters.PSobject.Properties["acpi"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ostype"))) { #optional property not found
            $Ostype = $null
        } else {
            $Ostype = $JsonParameters.PSobject.Properties["ostype"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hotplug"))) { #optional property not found
            $Hotplug = $null
        } else {
            $Hotplug = $JsonParameters.PSobject.Properties["hotplug"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "virtio[n]"))) { #optional property not found
            $VirtioN = $null
        } else {
            $VirtioN = $JsonParameters.PSobject.Properties["virtio[n]"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "migrate_downtime"))) { #optional property not found
            $MigrateDowntime = $null
        } else {
            $MigrateDowntime = $JsonParameters.PSobject.Properties["migrate_downtime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vga"))) { #optional property not found
            $Vga = $null
        } else {
            $Vga = $JsonParameters.PSobject.Properties["vga"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "boot"))) { #optional property not found
            $Boot = $null
        } else {
            $Boot = $JsonParameters.PSobject.Properties["boot"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bootdisk"))) { #optional property not found
            $Bootdisk = $null
        } else {
            $Bootdisk = $JsonParameters.PSobject.Properties["bootdisk"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "smp"))) { #optional property not found
            $Smp = $null
        } else {
            $Smp = $JsonParameters.PSobject.Properties["smp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hookscript"))) { #optional property not found
            $Hookscript = $null
        } else {
            $Hookscript = $JsonParameters.PSobject.Properties["hookscript"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lock"))) { #optional property not found
            $Lock = $null
        } else {
            $Lock = $JsonParameters.PSobject.Properties["lock"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "amd-sev"))) { #optional property not found
            $AmdSev = $null
        } else {
            $AmdSev = $JsonParameters.PSobject.Properties["amd-sev"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "startup"))) { #optional property not found
            $Startup = $null
        } else {
            $Startup = $JsonParameters.PSobject.Properties["startup"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "balloon"))) { #optional property not found
            $Balloon = $null
        } else {
            $Balloon = $JsonParameters.PSobject.Properties["balloon"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ciupgrade"))) { #optional property not found
            $Ciupgrade = $null
        } else {
            $Ciupgrade = $JsonParameters.PSobject.Properties["ciupgrade"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "migrate_speed"))) { #optional property not found
            $MigrateSpeed = $null
        } else {
            $MigrateSpeed = $JsonParameters.PSobject.Properties["migrate_speed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "shares"))) { #optional property not found
            $Shares = $null
        } else {
            $Shares = $JsonParameters.PSobject.Properties["shares"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ivshmem"))) { #optional property not found
            $Ivshmem = $null
        } else {
            $Ivshmem = $JsonParameters.PSobject.Properties["ivshmem"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serial[n]"))) { #optional property not found
            $SerialN = $null
        } else {
            $SerialN = $JsonParameters.PSobject.Properties["serial[n]"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "keyboard"))) { #optional property not found
            $Keyboard = $null
        } else {
            $Keyboard = $JsonParameters.PSobject.Properties["keyboard"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "virtiofs[n]"))) { #optional property not found
            $VirtiofsN = $null
        } else {
            $VirtiofsN = $JsonParameters.PSobject.Properties["virtiofs[n]"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "arch"))) { #optional property not found
            $Arch = $null
        } else {
            $Arch = $JsonParameters.PSobject.Properties["arch"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ciuser"))) { #optional property not found
            $Ciuser = $null
        } else {
            $Ciuser = $JsonParameters.PSobject.Properties["ciuser"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "smbios1"))) { #optional property not found
            $Smbios1 = $null
        } else {
            $Smbios1 = $JsonParameters.PSobject.Properties["smbios1"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "scsihw"))) { #optional property not found
            $Scsihw = $null
        } else {
            $Scsihw = $JsonParameters.PSobject.Properties["scsihw"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "parallel[n]"))) { #optional property not found
            $ParallelN = $null
        } else {
            $ParallelN = $JsonParameters.PSobject.Properties["parallel[n]"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "memory"))) { #optional property not found
            $Memory = $null
        } else {
            $Memory = $JsonParameters.PSobject.Properties["memory"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "startdate"))) { #optional property not found
            $Startdate = $null
        } else {
            $Startdate = $JsonParameters.PSobject.Properties["startdate"].value
        }

        $PSO = [PSCustomObject]@{
            "localtime" = ${Localtime}
            "hugepages" = ${Hugepages}
            "cipassword" = ${Cipassword}
            "vmstatestorage" = ${Vmstatestorage}
            "tablet" = ${Tablet}
            "watchdog" = ${Watchdog}
            "usb[n]" = ${UsbN}
            "bios" = ${Bios}
            "reboot" = ${Reboot}
            "digest" = ${Digest}
            "spice_enhancements" = ${SpiceEnhancements}
            "tags" = ${Tags}
            "efidisk0" = ${Efidisk0}
            "numa[n]" = ${NumaN}
            "ide[n]" = ${IdeN}
            "audio0" = ${Audio0}
            "tpmstate0" = ${Tpmstate0}
            "searchdomain" = ${Searchdomain}
            "machine" = ${Machine}
            "cicustom" = ${Cicustom}
            "cpuunits" = ${Cpuunits}
            "sockets" = ${Sockets}
            "scsi[n]" = ${ScsiN}
            "vcpus" = ${Vcpus}
            "cpu" = ${Cpu}
            "onboot" = ${Onboot}
            "ipconfig[n]" = ${IpconfigN}
            "cdrom" = ${Cdrom}
            "tdf" = ${Tdf}
            "autostart" = ${Autostart}
            "unused[n]" = ${UnusedN}
            "agent" = ${Agent}
            "rng0" = ${Rng0}
            "freeze" = ${Freeze}
            "cpulimit" = ${Cpulimit}
            "name" = ${Name}
            "protection" = ${Protection}
            "sshkeys" = ${Sshkeys}
            "affinity" = ${Affinity}
            "net[n]" = ${NetN}
            "sata[n]" = ${SataN}
            "nameserver" = ${Nameserver}
            "args" = ${VarArgs}
            "vmgenid" = ${Vmgenid}
            "kvm" = ${Kvm}
            "citype" = ${Citype}
            "keephugepages" = ${Keephugepages}
            "numa" = ${Numa}
            "template" = ${Template}
            "cores" = ${Cores}
            "hostpci[n]" = ${HostpciN}
            "acpi" = ${Acpi}
            "ostype" = ${Ostype}
            "hotplug" = ${Hotplug}
            "virtio[n]" = ${VirtioN}
            "migrate_downtime" = ${MigrateDowntime}
            "vga" = ${Vga}
            "boot" = ${Boot}
            "bootdisk" = ${Bootdisk}
            "smp" = ${Smp}
            "hookscript" = ${Hookscript}
            "lock" = ${Lock}
            "amd-sev" = ${AmdSev}
            "startup" = ${Startup}
            "description" = ${Description}
            "balloon" = ${Balloon}
            "ciupgrade" = ${Ciupgrade}
            "migrate_speed" = ${MigrateSpeed}
            "shares" = ${Shares}
            "ivshmem" = ${Ivshmem}
            "serial[n]" = ${SerialN}
            "keyboard" = ${Keyboard}
            "virtiofs[n]" = ${VirtiofsN}
            "arch" = ${Arch}
            "ciuser" = ${Ciuser}
            "smbios1" = ${Smbios1}
            "scsihw" = ${Scsihw}
            "parallel[n]" = ${ParallelN}
            "memory" = ${Memory}
            "startdate" = ${Startdate}
        }

        return $PSO
    }

}

