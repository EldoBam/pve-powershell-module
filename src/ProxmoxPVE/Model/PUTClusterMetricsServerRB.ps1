#
# Proxmox PowerShell VE
# Generated module to access all Proxmox VE Api Endpoints. This module has been generated from the proxmox api description v. 8.4.0
# Version: 8.4.0
# Contact: mail@timo-wolf.de
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Delete
No description available.
.PARAMETER VerifyCertificate
No description available.
.PARAMETER Bucket
No description available.
.PARAMETER Organization
No description available.
.PARAMETER ApiPathPrefix
No description available.
.PARAMETER Timeout
No description available.
.PARAMETER Digest
No description available.
.PARAMETER Token
No description available.
.PARAMETER Port
No description available.
.PARAMETER Mtu
No description available.
.PARAMETER Influxdbproto
No description available.
.PARAMETER Disable
No description available.
.PARAMETER Server
No description available.
.PARAMETER Proto
No description available.
.PARAMETER MaxBodySize
No description available.
.PARAMETER Path
No description available.
.OUTPUTS

PUTClusterMetricsServerRB<PSCustomObject>
#>

function Initialize-PVEPUTClusterMetricsServerRB {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Delete},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${VerifyCertificate},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Bucket},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Organization},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ApiPathPrefix},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Timeout},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Digest},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Token},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Port},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Mtu},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("udp", "http", "https")]
        [String]
        ${Influxdbproto},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Disable},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Server},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("udp", "tcp")]
        [String]
        ${Proto},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MaxBodySize},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Path}
    )

    Process {
        'Creating PSCustomObject: ProxmoxPVE => PVEPUTClusterMetricsServerRB' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Delete -and $Delete.length -gt 4096) {
            throw "invalid value for 'Delete', the character length must be smaller than or equal to 4096."
        }

        if (!$Digest -and $Digest.length -gt 64) {
            throw "invalid value for 'Digest', the character length must be smaller than or equal to 64."
        }

        if ($Port -and $Port -gt 65536) {
          throw "invalid value for 'Port', must be smaller than or equal to 65536."
        }

        if ($Port -and $Port -lt 1) {
          throw "invalid value for 'Port', must be greater than or equal to 1."
        }

        if ($Mtu -and $Mtu -gt 65536) {
          throw "invalid value for 'Mtu', must be smaller than or equal to 65536."
        }

        if ($Mtu -and $Mtu -lt 512) {
          throw "invalid value for 'Mtu', must be greater than or equal to 512."
        }

        if ($MaxBodySize -and $MaxBodySize -lt 1) {
          throw "invalid value for 'MaxBodySize', must be greater than or equal to 1."
        }


		 $DisplayNameMapping =@{
			"Delete"="delete"; "VerifyCertificate"="verify-certificate"; "Bucket"="bucket"; "Organization"="organization"; "ApiPathPrefix"="api-path-prefix"; "Timeout"="timeout"; "Digest"="digest"; "Token"="token"; "Port"="port"; "Mtu"="mtu"; "Influxdbproto"="influxdbproto"; "Disable"="disable"; "Server"="server"; "Proto"="proto"; "MaxBodySize"="max-body-size"; "Path"="path"
        }
		
		 $OBJ = @{}
		foreach($parameter in   $PSBoundParameters.Keys){
			#If Specifield map the Display name back
			$OBJ.($DisplayNameMapping.($parameter)) = $PSBoundParameters.$parameter
		}

		$PSO = [PSCustomObject]$OBJ


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PUTClusterMetricsServerRB<PSCustomObject>

.DESCRIPTION

Convert from JSON to PUTClusterMetricsServerRB<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PUTClusterMetricsServerRB<PSCustomObject>
#>
function ConvertFrom-PVEJsonToPUTClusterMetricsServerRB {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ProxmoxPVE => PVEPUTClusterMetricsServerRB' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PVEPUTClusterMetricsServerRB
        $AllProperties = ("delete", "verify-certificate", "bucket", "organization", "api-path-prefix", "timeout", "digest", "token", "port", "mtu", "influxdbproto", "disable", "server", "proto", "max-body-size", "path")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "delete"))) { #optional property not found
            $Delete = $null
        } else {
            $Delete = $JsonParameters.PSobject.Properties["delete"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "verify-certificate"))) { #optional property not found
            $VerifyCertificate = $null
        } else {
            $VerifyCertificate = $JsonParameters.PSobject.Properties["verify-certificate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bucket"))) { #optional property not found
            $Bucket = $null
        } else {
            $Bucket = $JsonParameters.PSobject.Properties["bucket"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "organization"))) { #optional property not found
            $Organization = $null
        } else {
            $Organization = $JsonParameters.PSobject.Properties["organization"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "api-path-prefix"))) { #optional property not found
            $ApiPathPrefix = $null
        } else {
            $ApiPathPrefix = $JsonParameters.PSobject.Properties["api-path-prefix"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timeout"))) { #optional property not found
            $Timeout = $null
        } else {
            $Timeout = $JsonParameters.PSobject.Properties["timeout"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "digest"))) { #optional property not found
            $Digest = $null
        } else {
            $Digest = $JsonParameters.PSobject.Properties["digest"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "token"))) { #optional property not found
            $Token = $null
        } else {
            $Token = $JsonParameters.PSobject.Properties["token"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "port"))) { #optional property not found
            $Port = $null
        } else {
            $Port = $JsonParameters.PSobject.Properties["port"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mtu"))) { #optional property not found
            $Mtu = $null
        } else {
            $Mtu = $JsonParameters.PSobject.Properties["mtu"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "influxdbproto"))) { #optional property not found
            $Influxdbproto = $null
        } else {
            $Influxdbproto = $JsonParameters.PSobject.Properties["influxdbproto"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "disable"))) { #optional property not found
            $Disable = $null
        } else {
            $Disable = $JsonParameters.PSobject.Properties["disable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "server"))) { #optional property not found
            $Server = $null
        } else {
            $Server = $JsonParameters.PSobject.Properties["server"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "proto"))) { #optional property not found
            $Proto = $null
        } else {
            $Proto = $JsonParameters.PSobject.Properties["proto"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "max-body-size"))) { #optional property not found
            $MaxBodySize = $null
        } else {
            $MaxBodySize = $JsonParameters.PSobject.Properties["max-body-size"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "path"))) { #optional property not found
            $Path = $null
        } else {
            $Path = $JsonParameters.PSobject.Properties["path"].value
        }

        $PSO = [PSCustomObject]@{
            "delete" = ${Delete}
            "verify-certificate" = ${VerifyCertificate}
            "bucket" = ${Bucket}
            "organization" = ${Organization}
            "api-path-prefix" = ${ApiPathPrefix}
            "timeout" = ${Timeout}
            "digest" = ${Digest}
            "token" = ${Token}
            "port" = ${Port}
            "mtu" = ${Mtu}
            "influxdbproto" = ${Influxdbproto}
            "disable" = ${Disable}
            "server" = ${Server}
            "proto" = ${Proto}
            "max-body-size" = ${MaxBodySize}
            "path" = ${Path}
        }

        return $PSO
    }

}

