#
# Proxmox VE
# Generated module to access all Proxmox VE Api Endpoints
# Version: 0.6
# Contact: amna.wolf@gmail.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Author
No description available.
.PARAMETER Digest
No description available.
.PARAMETER FromAddress
No description available.
.PARAMETER Disable
No description available.
.PARAMETER Delete
No description available.
.PARAMETER MailtoUser
No description available.
.PARAMETER Comment
No description available.
.PARAMETER Mailto
No description available.
.OUTPUTS

PUTClusterNotificationsEndpointsSendmailRB<PSCustomObject>
#>

function Initialize-PVEPUTClusterNotificationsEndpointsSendmailRB {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Author},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Digest},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FromAddress},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Disable},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Delete},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${MailtoUser},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Comment},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Mailto}
    )

    Process {
        'Creating PSCustomObject: ProxmoxPVE => PVEPUTClusterNotificationsEndpointsSendmailRB' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Digest -and $Digest.length -gt 64) {
            throw "invalid value for 'Digest', the character length must be smaller than or equal to 64."
        }


		 $DisplayNameMapping =@{
			"Author"="author"; "Digest"="digest"; "FromAddress"="from-address"; "Disable"="disable"; "Delete"="delete"; "MailtoUser"="mailto-user"; "Comment"="comment"; "Mailto"="mailto"
        }
		
		 $OBJ = @{}
		foreach($parameter in   $PSBoundParameters.Keys){
			#If Specifield map the Display name back
			$OBJ.($DisplayNameMapping.($parameter)) = $PSBoundParameters.$parameter
		}

		$PSO = [PSCustomObject]$OBJ


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PUTClusterNotificationsEndpointsSendmailRB<PSCustomObject>

.DESCRIPTION

Convert from JSON to PUTClusterNotificationsEndpointsSendmailRB<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PUTClusterNotificationsEndpointsSendmailRB<PSCustomObject>
#>
function ConvertFrom-PVEJsonToPUTClusterNotificationsEndpointsSendmailRB {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ProxmoxPVE => PVEPUTClusterNotificationsEndpointsSendmailRB' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PVEPUTClusterNotificationsEndpointsSendmailRB
        $AllProperties = ("author", "digest", "from-address", "disable", "delete", "mailto-user", "comment", "mailto")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "author"))) { #optional property not found
            $Author = $null
        } else {
            $Author = $JsonParameters.PSobject.Properties["author"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "digest"))) { #optional property not found
            $Digest = $null
        } else {
            $Digest = $JsonParameters.PSobject.Properties["digest"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "from-address"))) { #optional property not found
            $FromAddress = $null
        } else {
            $FromAddress = $JsonParameters.PSobject.Properties["from-address"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "disable"))) { #optional property not found
            $Disable = $null
        } else {
            $Disable = $JsonParameters.PSobject.Properties["disable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "delete"))) { #optional property not found
            $Delete = $null
        } else {
            $Delete = $JsonParameters.PSobject.Properties["delete"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mailto-user"))) { #optional property not found
            $MailtoUser = $null
        } else {
            $MailtoUser = $JsonParameters.PSobject.Properties["mailto-user"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "comment"))) { #optional property not found
            $Comment = $null
        } else {
            $Comment = $JsonParameters.PSobject.Properties["comment"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mailto"))) { #optional property not found
            $Mailto = $null
        } else {
            $Mailto = $JsonParameters.PSobject.Properties["mailto"].value
        }

        $PSO = [PSCustomObject]@{
            "author" = ${Author}
            "digest" = ${Digest}
            "from-address" = ${FromAddress}
            "disable" = ${Disable}
            "delete" = ${Delete}
            "mailto-user" = ${MailtoUser}
            "comment" = ${Comment}
            "mailto" = ${Mailto}
        }

        return $PSO
    }

}

