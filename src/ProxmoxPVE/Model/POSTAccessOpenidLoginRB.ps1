#
# Proxmox PowerShell VE
# Generated module to access all Proxmox VE Api Endpoints. This module has been generated from the proxmox api description v. 8.4.0
# Version: 8.4.0
# Contact: mail@timo-wolf.de
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Code
No description available.
.PARAMETER RedirectUrl
No description available.
.PARAMETER State
No description available.
.OUTPUTS

POSTAccessOpenidLoginRB<PSCustomObject>
#>

function Initialize-PVEPOSTAccessOpenidLoginRB {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Code},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RedirectUrl},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${State}
    )

    Process {
        'Creating PSCustomObject: ProxmoxPVE => PVEPOSTAccessOpenidLoginRB' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Code -and $Code.length -gt 4096) {
            throw "invalid value for 'Code', the character length must be smaller than or equal to 4096."
        }

        if (!$RedirectUrl -and $RedirectUrl.length -gt 255) {
            throw "invalid value for 'RedirectUrl', the character length must be smaller than or equal to 255."
        }

        if (!$State -and $State.length -gt 1024) {
            throw "invalid value for 'State', the character length must be smaller than or equal to 1024."
        }


		 $DisplayNameMapping =@{
			"Code"="code"; "RedirectUrl"="redirect-url"; "State"="state"
        }
		
		 $OBJ = @{}
		foreach($parameter in   $PSBoundParameters.Keys){
			#If Specifield map the Display name back
			$OBJ.($DisplayNameMapping.($parameter)) = $PSBoundParameters.$parameter
		}

		$PSO = [PSCustomObject]$OBJ


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to POSTAccessOpenidLoginRB<PSCustomObject>

.DESCRIPTION

Convert from JSON to POSTAccessOpenidLoginRB<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

POSTAccessOpenidLoginRB<PSCustomObject>
#>
function ConvertFrom-PVEJsonToPOSTAccessOpenidLoginRB {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ProxmoxPVE => PVEPOSTAccessOpenidLoginRB' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PVEPOSTAccessOpenidLoginRB
        $AllProperties = ("code", "redirect-url", "state")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "code"))) { #optional property not found
            $Code = $null
        } else {
            $Code = $JsonParameters.PSobject.Properties["code"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "redirect-url"))) { #optional property not found
            $RedirectUrl = $null
        } else {
            $RedirectUrl = $JsonParameters.PSobject.Properties["redirect-url"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "state"))) { #optional property not found
            $State = $null
        } else {
            $State = $JsonParameters.PSobject.Properties["state"].value
        }

        $PSO = [PSCustomObject]@{
            "code" = ${Code}
            "redirect-url" = ${RedirectUrl}
            "state" = ${State}
        }

        return $PSO
    }

}

