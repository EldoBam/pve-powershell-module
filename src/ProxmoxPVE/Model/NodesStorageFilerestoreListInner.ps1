#
# Proxmox VE
# Generated module to access all Proxmox VE Api Endpoints
# Version: 0.5
# Contact: amna.wolf@gmail.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Size
No description available.
.PARAMETER Text
No description available.
.PARAMETER Type
No description available.
.PARAMETER Filepath
No description available.
.PARAMETER Mtime
No description available.
.PARAMETER Leaf
No description available.
.OUTPUTS

NodesStorageFilerestoreListInner<PSCustomObject>
#>

function Initialize-PVENodesStorageFilerestoreListInner {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Size},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Text},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Filepath},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Mtime},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Leaf}
    )

    Process {
        'Creating PSCustomObject: ProxmoxPVE => PVENodesStorageFilerestoreListInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


		 $DisplayNameMapping =@{
			"Size"="size"; "Text"="text"; "Type"="type"; "Filepath"="filepath"; "Mtime"="mtime"; "Leaf"="leaf"
        }
		
		 $OBJ = @{}
		foreach($parameter in   $PSBoundParameters.Keys){
			#If Specifield map the Display name back
			$OBJ.($DisplayNameMapping.($parameter)) = $PSBoundParameters.$parameter
		}

		$PSO = [PSCustomObject]$OBJ


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NodesStorageFilerestoreListInner<PSCustomObject>

.DESCRIPTION

Convert from JSON to NodesStorageFilerestoreListInner<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NodesStorageFilerestoreListInner<PSCustomObject>
#>
function ConvertFrom-PVEJsonToNodesStorageFilerestoreListInner {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ProxmoxPVE => PVENodesStorageFilerestoreListInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PVENodesStorageFilerestoreListInner
        $AllProperties = ("size", "text", "type", "filepath", "mtime", "leaf")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "size"))) { #optional property not found
            $Size = $null
        } else {
            $Size = $JsonParameters.PSobject.Properties["size"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "text"))) { #optional property not found
            $Text = $null
        } else {
            $Text = $JsonParameters.PSobject.Properties["text"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "filepath"))) { #optional property not found
            $Filepath = $null
        } else {
            $Filepath = $JsonParameters.PSobject.Properties["filepath"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mtime"))) { #optional property not found
            $Mtime = $null
        } else {
            $Mtime = $JsonParameters.PSobject.Properties["mtime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "leaf"))) { #optional property not found
            $Leaf = $null
        } else {
            $Leaf = $JsonParameters.PSobject.Properties["leaf"].value
        }

        $PSO = [PSCustomObject]@{
            "size" = ${Size}
            "text" = ${Text}
            "type" = ${Type}
            "filepath" = ${Filepath}
            "mtime" = ${Mtime}
            "leaf" = ${Leaf}
        }

        return $PSO
    }

}

