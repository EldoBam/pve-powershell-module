#
# Proxmox VE Module 1.0
# Generated OpenApiDescription to render Modules via OpenapiGenerator
# Version: 0.1
# Contact: 
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Maxcpu
No description available.
.PARAMETER Cpu
No description available.
.PARAMETER Level
No description available.
.PARAMETER Maxmem
No description available.
.PARAMETER Mem
No description available.
.PARAMETER Uptime
No description available.
.PARAMETER SslFingerprint
No description available.
.PARAMETER Status
No description available.
.PARAMETER Node
No description available.
.OUTPUTS

NodesInner<PSCustomObject>
#>

function Initialize-PVENodesInner {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Maxcpu},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${Cpu},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Level},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Maxmem},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Mem},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Uptime},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SslFingerprint},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("unknown", "online", "offline")]
        [String]
        ${Status},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Node}
    )

    Process {
        'Creating PSCustomObject: ProxmoxPVE => PVENodesInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


		 $DisplayNameMapping =@{
			"Maxcpu"="maxcpu"; "Cpu"="cpu"; "Level"="level"; "Maxmem"="maxmem"; "Mem"="mem"; "Uptime"="uptime"; "SslFingerprint"="ssl_fingerprint"; "Status"="status"; "Node"="node"
        }
		
		 $OBJ = @{}
		foreach($parameter in   $PSBoundParameters.Keys){
			#If Specifield map the Display name back
			$OBJ.($DisplayNameMapping.($parameter)) = "$PSBoundParameters.$parameter"
		}

		$PSO = [PSCustomObject]$OBJ


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NodesInner<PSCustomObject>

.DESCRIPTION

Convert from JSON to NodesInner<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NodesInner<PSCustomObject>
#>
function ConvertFrom-PVEJsonToNodesInner {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ProxmoxPVE => PVENodesInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PVENodesInner
        $AllProperties = ("maxcpu", "cpu", "level", "maxmem", "mem", "uptime", "ssl_fingerprint", "status", "node")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxcpu"))) { #optional property not found
            $Maxcpu = $null
        } else {
            $Maxcpu = $JsonParameters.PSobject.Properties["maxcpu"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cpu"))) { #optional property not found
            $Cpu = $null
        } else {
            $Cpu = $JsonParameters.PSobject.Properties["cpu"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "level"))) { #optional property not found
            $Level = $null
        } else {
            $Level = $JsonParameters.PSobject.Properties["level"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxmem"))) { #optional property not found
            $Maxmem = $null
        } else {
            $Maxmem = $JsonParameters.PSobject.Properties["maxmem"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mem"))) { #optional property not found
            $Mem = $null
        } else {
            $Mem = $JsonParameters.PSobject.Properties["mem"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "uptime"))) { #optional property not found
            $Uptime = $null
        } else {
            $Uptime = $JsonParameters.PSobject.Properties["uptime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ssl_fingerprint"))) { #optional property not found
            $SslFingerprint = $null
        } else {
            $SslFingerprint = $JsonParameters.PSobject.Properties["ssl_fingerprint"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "node"))) { #optional property not found
            $Node = $null
        } else {
            $Node = $JsonParameters.PSobject.Properties["node"].value
        }

        $PSO = [PSCustomObject]@{
            "maxcpu" = ${Maxcpu}
            "cpu" = ${Cpu}
            "level" = ${Level}
            "maxmem" = ${Maxmem}
            "mem" = ${Mem}
            "uptime" = ${Uptime}
            "ssl_fingerprint" = ${SslFingerprint}
            "status" = ${Status}
            "node" = ${Node}
        }

        return $PSO
    }

}

