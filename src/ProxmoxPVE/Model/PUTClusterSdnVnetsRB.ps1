#
# Proxmox VE Module 1.0
# Generated OpenApiDescription to render Modules via OpenapiGenerator
# Version: 0.1
# Contact: 
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Alias
No description available.
.PARAMETER Digest
No description available.
.PARAMETER IsolatePorts
No description available.
.PARAMETER Vnet
No description available.
.PARAMETER Vlanaware
No description available.
.PARAMETER Delete
No description available.
.PARAMETER Zone
No description available.
.PARAMETER Tag
No description available.
.OUTPUTS

PUTClusterSdnVnetsRB<PSCustomObject>
#>

function Initialize-PVEPUTClusterSdnVnetsRB {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("(?^i:[\(\)-_.\w\d\s]{0,256})")]
        [String]
        ${Alias},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Digest},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${IsolatePorts},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Vnet},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Vlanaware},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Delete},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Zone},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Tag}
    )

    Process {
        'Creating PSCustomObject: ProxmoxPVE => PVEPUTClusterSdnVnetsRB' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Alias -and $Alias.length -gt 256) {
            throw "invalid value for 'Alias', the character length must be smaller than or equal to 256."
        }

        if (!$Digest -and $Digest.length -gt 64) {
            throw "invalid value for 'Digest', the character length must be smaller than or equal to 64."
        }

        if ($IsolatePorts -and $IsolatePorts -gt 1) {
          throw "invalid value for 'IsolatePorts', must be smaller than or equal to 1."
        }

        if ($IsolatePorts -and $IsolatePorts -lt 0) {
          throw "invalid value for 'IsolatePorts', must be greater than or equal to 0."
        }

        if ($Vlanaware -and $Vlanaware -gt 1) {
          throw "invalid value for 'Vlanaware', must be smaller than or equal to 1."
        }

        if ($Vlanaware -and $Vlanaware -lt 0) {
          throw "invalid value for 'Vlanaware', must be greater than or equal to 0."
        }

        if (!$Delete -and $Delete.length -gt 4096) {
            throw "invalid value for 'Delete', the character length must be smaller than or equal to 4096."
        }


		 $DisplayNameMapping =@{
			"Alias"="alias"; "Digest"="digest"; "IsolatePorts"="isolate-ports"; "Vnet"="vnet"; "Vlanaware"="vlanaware"; "Delete"="delete"; "Zone"="zone"; "Tag"="tag"
        }
		
		 $OBJ = @{}
		foreach($parameter in   $PSBoundParameters.Keys){
			#If Specifield map the Display name back
			$OBJ.($DisplayNameMapping.($parameter)) = "$PSBoundParameters.$parameter"
		}

		$PSO = [PSCustomObject]$OBJ


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PUTClusterSdnVnetsRB<PSCustomObject>

.DESCRIPTION

Convert from JSON to PUTClusterSdnVnetsRB<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PUTClusterSdnVnetsRB<PSCustomObject>
#>
function ConvertFrom-PVEJsonToPUTClusterSdnVnetsRB {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ProxmoxPVE => PVEPUTClusterSdnVnetsRB' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PVEPUTClusterSdnVnetsRB
        $AllProperties = ("alias", "digest", "isolate-ports", "vnet", "vlanaware", "delete", "zone", "tag")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "alias"))) { #optional property not found
            $Alias = $null
        } else {
            $Alias = $JsonParameters.PSobject.Properties["alias"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "digest"))) { #optional property not found
            $Digest = $null
        } else {
            $Digest = $JsonParameters.PSobject.Properties["digest"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isolate-ports"))) { #optional property not found
            $IsolatePorts = $null
        } else {
            $IsolatePorts = $JsonParameters.PSobject.Properties["isolate-ports"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vnet"))) { #optional property not found
            $Vnet = $null
        } else {
            $Vnet = $JsonParameters.PSobject.Properties["vnet"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vlanaware"))) { #optional property not found
            $Vlanaware = $null
        } else {
            $Vlanaware = $JsonParameters.PSobject.Properties["vlanaware"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "delete"))) { #optional property not found
            $Delete = $null
        } else {
            $Delete = $JsonParameters.PSobject.Properties["delete"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "zone"))) { #optional property not found
            $Zone = $null
        } else {
            $Zone = $JsonParameters.PSobject.Properties["zone"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tag"))) { #optional property not found
            $Tag = $null
        } else {
            $Tag = $JsonParameters.PSobject.Properties["tag"].value
        }

        $PSO = [PSCustomObject]@{
            "alias" = ${Alias}
            "digest" = ${Digest}
            "isolate-ports" = ${IsolatePorts}
            "vnet" = ${Vnet}
            "vlanaware" = ${Vlanaware}
            "delete" = ${Delete}
            "zone" = ${Zone}
            "tag" = ${Tag}
        }

        return $PSO
    }

}

