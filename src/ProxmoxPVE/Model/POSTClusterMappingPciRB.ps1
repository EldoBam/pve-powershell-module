#
# Proxmox VE
# Generated module to access all Proxmox VE Api Endpoints
# Version: 0.5
# Contact: amna.wolf@gmail.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER LiveMigrationCapable
No description available.
.PARAMETER Map
No description available.
.PARAMETER Mdev
No description available.
.PARAMETER Description
No description available.
.PARAMETER Id
No description available.
.OUTPUTS

POSTClusterMappingPciRB<PSCustomObject>
#>

function Initialize-PVEPOSTClusterMappingPciRB {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${LiveMigrationCapable},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Map},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Mdev},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id}
    )

    Process {
        'Creating PSCustomObject: ProxmoxPVE => PVEPOSTClusterMappingPciRB' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Description -and $Description.length -gt 4096) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 4096."
        }


		 $DisplayNameMapping =@{
			"LiveMigrationCapable"="live-migration-capable"; "Map"="map"; "Mdev"="mdev"; "Description"="description"; "Id"="id"
        }
		
		 $OBJ = @{}
		foreach($parameter in   $PSBoundParameters.Keys){
			#If Specifield map the Display name back
			$OBJ.($DisplayNameMapping.($parameter)) = $PSBoundParameters.$parameter
		}

		$PSO = [PSCustomObject]$OBJ


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to POSTClusterMappingPciRB<PSCustomObject>

.DESCRIPTION

Convert from JSON to POSTClusterMappingPciRB<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

POSTClusterMappingPciRB<PSCustomObject>
#>
function ConvertFrom-PVEJsonToPOSTClusterMappingPciRB {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ProxmoxPVE => PVEPOSTClusterMappingPciRB' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PVEPOSTClusterMappingPciRB
        $AllProperties = ("live-migration-capable", "map", "mdev", "description", "id")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "live-migration-capable"))) { #optional property not found
            $LiveMigrationCapable = $null
        } else {
            $LiveMigrationCapable = $JsonParameters.PSobject.Properties["live-migration-capable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "map"))) { #optional property not found
            $Map = $null
        } else {
            $Map = $JsonParameters.PSobject.Properties["map"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mdev"))) { #optional property not found
            $Mdev = $null
        } else {
            $Mdev = $JsonParameters.PSobject.Properties["mdev"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        $PSO = [PSCustomObject]@{
            "live-migration-capable" = ${LiveMigrationCapable}
            "map" = ${Map}
            "mdev" = ${Mdev}
            "description" = ${Description}
            "id" = ${Id}
        }

        return $PSO
    }

}

