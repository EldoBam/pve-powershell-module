#
# Proxmox PowerShell VE
# Generated module to access all Proxmox VE Api Endpoints. This module has been generated from the proxmox api description v. 8.4.0
# Version: 8.4.0
# Contact: mail@timo-wolf.de
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Delete
No description available.
.PARAMETER Schedule
No description available.
.PARAMETER Rate
No description available.
.PARAMETER Disable
No description available.
.PARAMETER RemoveJob
No description available.
.PARAMETER Digest
No description available.
.PARAMETER Source
No description available.
.PARAMETER Comment
No description available.
.OUTPUTS

PUTClusterReplicationRB<PSCustomObject>
#>

function Initialize-PVEPUTClusterReplicationRB {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Delete},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Schedule},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${Rate},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Disable},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("local", "full")]
        [String]
        ${RemoveJob},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Digest},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Source},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Comment}
    )

    Process {
        'Creating PSCustomObject: ProxmoxPVE => PVEPUTClusterReplicationRB' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Delete -and $Delete.length -gt 4096) {
            throw "invalid value for 'Delete', the character length must be smaller than or equal to 4096."
        }

        if (!$Schedule -and $Schedule.length -gt 128) {
            throw "invalid value for 'Schedule', the character length must be smaller than or equal to 128."
        }

        if ($Rate -and $Rate -lt 1) {
          throw "invalid value for 'Rate', must be greater than or equal to 1."
        }

        if (!$Digest -and $Digest.length -gt 64) {
            throw "invalid value for 'Digest', the character length must be smaller than or equal to 64."
        }

        if (!$Comment -and $Comment.length -gt 4096) {
            throw "invalid value for 'Comment', the character length must be smaller than or equal to 4096."
        }


		 $DisplayNameMapping =@{
			"Delete"="delete"; "Schedule"="schedule"; "Rate"="rate"; "Disable"="disable"; "RemoveJob"="remove_job"; "Digest"="digest"; "Source"="source"; "Comment"="comment"
        }
		
		 $OBJ = @{}
		foreach($parameter in   $PSBoundParameters.Keys){
			#If Specifield map the Display name back
			$OBJ.($DisplayNameMapping.($parameter)) = $PSBoundParameters.$parameter
		}

		$PSO = [PSCustomObject]$OBJ


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PUTClusterReplicationRB<PSCustomObject>

.DESCRIPTION

Convert from JSON to PUTClusterReplicationRB<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PUTClusterReplicationRB<PSCustomObject>
#>
function ConvertFrom-PVEJsonToPUTClusterReplicationRB {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ProxmoxPVE => PVEPUTClusterReplicationRB' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PVEPUTClusterReplicationRB
        $AllProperties = ("delete", "schedule", "rate", "disable", "remove_job", "digest", "source", "comment")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "delete"))) { #optional property not found
            $Delete = $null
        } else {
            $Delete = $JsonParameters.PSobject.Properties["delete"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "schedule"))) { #optional property not found
            $Schedule = $null
        } else {
            $Schedule = $JsonParameters.PSobject.Properties["schedule"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rate"))) { #optional property not found
            $Rate = $null
        } else {
            $Rate = $JsonParameters.PSobject.Properties["rate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "disable"))) { #optional property not found
            $Disable = $null
        } else {
            $Disable = $JsonParameters.PSobject.Properties["disable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "remove_job"))) { #optional property not found
            $RemoveJob = $null
        } else {
            $RemoveJob = $JsonParameters.PSobject.Properties["remove_job"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "digest"))) { #optional property not found
            $Digest = $null
        } else {
            $Digest = $JsonParameters.PSobject.Properties["digest"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "source"))) { #optional property not found
            $Source = $null
        } else {
            $Source = $JsonParameters.PSobject.Properties["source"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "comment"))) { #optional property not found
            $Comment = $null
        } else {
            $Comment = $JsonParameters.PSobject.Properties["comment"].value
        }

        $PSO = [PSCustomObject]@{
            "delete" = ${Delete}
            "schedule" = ${Schedule}
            "rate" = ${Rate}
            "disable" = ${Disable}
            "remove_job" = ${RemoveJob}
            "digest" = ${Digest}
            "source" = ${Source}
            "comment" = ${Comment}
        }

        return $PSO
    }

}

