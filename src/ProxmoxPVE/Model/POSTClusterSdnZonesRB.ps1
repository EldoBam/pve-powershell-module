#
# Proxmox VE
# Generated module to access all Proxmox VE Api Endpoints
# Version: 0.6
# Contact: amna.wolf@gmail.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER VxlanPort
No description available.
.PARAMETER Ipam
No description available.
.PARAMETER Peers
No description available.
.PARAMETER Dnszone
No description available.
.PARAMETER RtImport
No description available.
.PARAMETER Dns
No description available.
.PARAMETER Tag
No description available.
.PARAMETER Type
No description available.
.PARAMETER VlanProtocol
No description available.
.PARAMETER Exitnodes
No description available.
.PARAMETER DpId
No description available.
.PARAMETER Zone
No description available.
.PARAMETER Reversedns
No description available.
.PARAMETER Nodes
No description available.
.PARAMETER Mac
No description available.
.PARAMETER VrfVxlan
No description available.
.PARAMETER DisableArpNdSuppression
No description available.
.PARAMETER Controller
No description available.
.PARAMETER BridgeDisableMacLearning
No description available.
.PARAMETER ExitnodesLocalRouting
No description available.
.PARAMETER Dhcp
No description available.
.PARAMETER Bridge
No description available.
.PARAMETER Mtu
No description available.
.PARAMETER ExitnodesPrimary
No description available.
.PARAMETER AdvertiseSubnets
No description available.
.OUTPUTS

POSTClusterSdnZonesRB<PSCustomObject>
#>

function Initialize-PVEPOSTClusterSdnZonesRB {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${VxlanPort},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Ipam},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Peers},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Dnszone},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RtImport},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Dns},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Tag},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("evpn", "faucet", "qinq", "simple", "vlan", "vxlan")]
        [String]
        ${Type},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("802.1q", "802.1ad")]
        [String]
        ${VlanProtocol},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Exitnodes},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${DpId},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Zone},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Reversedns},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Nodes},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Mac},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${VrfVxlan},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${DisableArpNdSuppression},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Controller},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${BridgeDisableMacLearning},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${ExitnodesLocalRouting},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("dnsmasq")]
        [String]
        ${Dhcp},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Bridge},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Mtu},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ExitnodesPrimary},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AdvertiseSubnets}
    )

    Process {
        'Creating PSCustomObject: ProxmoxPVE => PVEPOSTClusterSdnZonesRB' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($VxlanPort -and $VxlanPort -gt 65536) {
          throw "invalid value for 'VxlanPort', must be smaller than or equal to 65536."
        }

        if ($VxlanPort -and $VxlanPort -lt 1) {
          throw "invalid value for 'VxlanPort', must be greater than or equal to 1."
        }


		 $DisplayNameMapping =@{
			"VxlanPort"="vxlan-port"; "Ipam"="ipam"; "Peers"="peers"; "Dnszone"="dnszone"; "RtImport"="rt-import"; "Dns"="dns"; "Tag"="tag"; "Type"="type"; "VlanProtocol"="vlan-protocol"; "Exitnodes"="exitnodes"; "DpId"="dp-id"; "Zone"="zone"; "Reversedns"="reversedns"; "Nodes"="nodes"; "Mac"="mac"; "VrfVxlan"="vrf-vxlan"; "DisableArpNdSuppression"="disable-arp-nd-suppression"; "Controller"="controller"; "BridgeDisableMacLearning"="bridge-disable-mac-learning"; "ExitnodesLocalRouting"="exitnodes-local-routing"; "Dhcp"="dhcp"; "Bridge"="bridge"; "Mtu"="mtu"; "ExitnodesPrimary"="exitnodes-primary"; "AdvertiseSubnets"="advertise-subnets"
        }
		
		 $OBJ = @{}
		foreach($parameter in   $PSBoundParameters.Keys){
			#If Specifield map the Display name back
			$OBJ.($DisplayNameMapping.($parameter)) = $PSBoundParameters.$parameter
		}

		$PSO = [PSCustomObject]$OBJ


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to POSTClusterSdnZonesRB<PSCustomObject>

.DESCRIPTION

Convert from JSON to POSTClusterSdnZonesRB<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

POSTClusterSdnZonesRB<PSCustomObject>
#>
function ConvertFrom-PVEJsonToPOSTClusterSdnZonesRB {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ProxmoxPVE => PVEPOSTClusterSdnZonesRB' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PVEPOSTClusterSdnZonesRB
        $AllProperties = ("vxlan-port", "ipam", "peers", "dnszone", "rt-import", "dns", "tag", "type", "vlan-protocol", "exitnodes", "dp-id", "zone", "reversedns", "nodes", "mac", "vrf-vxlan", "disable-arp-nd-suppression", "controller", "bridge-disable-mac-learning", "exitnodes-local-routing", "dhcp", "bridge", "mtu", "exitnodes-primary", "advertise-subnets")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vxlan-port"))) { #optional property not found
            $VxlanPort = $null
        } else {
            $VxlanPort = $JsonParameters.PSobject.Properties["vxlan-port"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ipam"))) { #optional property not found
            $Ipam = $null
        } else {
            $Ipam = $JsonParameters.PSobject.Properties["ipam"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "peers"))) { #optional property not found
            $Peers = $null
        } else {
            $Peers = $JsonParameters.PSobject.Properties["peers"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dnszone"))) { #optional property not found
            $Dnszone = $null
        } else {
            $Dnszone = $JsonParameters.PSobject.Properties["dnszone"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rt-import"))) { #optional property not found
            $RtImport = $null
        } else {
            $RtImport = $JsonParameters.PSobject.Properties["rt-import"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dns"))) { #optional property not found
            $Dns = $null
        } else {
            $Dns = $JsonParameters.PSobject.Properties["dns"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tag"))) { #optional property not found
            $Tag = $null
        } else {
            $Tag = $JsonParameters.PSobject.Properties["tag"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vlan-protocol"))) { #optional property not found
            $VlanProtocol = $null
        } else {
            $VlanProtocol = $JsonParameters.PSobject.Properties["vlan-protocol"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "exitnodes"))) { #optional property not found
            $Exitnodes = $null
        } else {
            $Exitnodes = $JsonParameters.PSobject.Properties["exitnodes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dp-id"))) { #optional property not found
            $DpId = $null
        } else {
            $DpId = $JsonParameters.PSobject.Properties["dp-id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "zone"))) { #optional property not found
            $Zone = $null
        } else {
            $Zone = $JsonParameters.PSobject.Properties["zone"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "reversedns"))) { #optional property not found
            $Reversedns = $null
        } else {
            $Reversedns = $JsonParameters.PSobject.Properties["reversedns"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nodes"))) { #optional property not found
            $Nodes = $null
        } else {
            $Nodes = $JsonParameters.PSobject.Properties["nodes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mac"))) { #optional property not found
            $Mac = $null
        } else {
            $Mac = $JsonParameters.PSobject.Properties["mac"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vrf-vxlan"))) { #optional property not found
            $VrfVxlan = $null
        } else {
            $VrfVxlan = $JsonParameters.PSobject.Properties["vrf-vxlan"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "disable-arp-nd-suppression"))) { #optional property not found
            $DisableArpNdSuppression = $null
        } else {
            $DisableArpNdSuppression = $JsonParameters.PSobject.Properties["disable-arp-nd-suppression"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "controller"))) { #optional property not found
            $Controller = $null
        } else {
            $Controller = $JsonParameters.PSobject.Properties["controller"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bridge-disable-mac-learning"))) { #optional property not found
            $BridgeDisableMacLearning = $null
        } else {
            $BridgeDisableMacLearning = $JsonParameters.PSobject.Properties["bridge-disable-mac-learning"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "exitnodes-local-routing"))) { #optional property not found
            $ExitnodesLocalRouting = $null
        } else {
            $ExitnodesLocalRouting = $JsonParameters.PSobject.Properties["exitnodes-local-routing"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dhcp"))) { #optional property not found
            $Dhcp = $null
        } else {
            $Dhcp = $JsonParameters.PSobject.Properties["dhcp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bridge"))) { #optional property not found
            $Bridge = $null
        } else {
            $Bridge = $JsonParameters.PSobject.Properties["bridge"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mtu"))) { #optional property not found
            $Mtu = $null
        } else {
            $Mtu = $JsonParameters.PSobject.Properties["mtu"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "exitnodes-primary"))) { #optional property not found
            $ExitnodesPrimary = $null
        } else {
            $ExitnodesPrimary = $JsonParameters.PSobject.Properties["exitnodes-primary"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "advertise-subnets"))) { #optional property not found
            $AdvertiseSubnets = $null
        } else {
            $AdvertiseSubnets = $JsonParameters.PSobject.Properties["advertise-subnets"].value
        }

        $PSO = [PSCustomObject]@{
            "vxlan-port" = ${VxlanPort}
            "ipam" = ${Ipam}
            "peers" = ${Peers}
            "dnszone" = ${Dnszone}
            "rt-import" = ${RtImport}
            "dns" = ${Dns}
            "tag" = ${Tag}
            "type" = ${Type}
            "vlan-protocol" = ${VlanProtocol}
            "exitnodes" = ${Exitnodes}
            "dp-id" = ${DpId}
            "zone" = ${Zone}
            "reversedns" = ${Reversedns}
            "nodes" = ${Nodes}
            "mac" = ${Mac}
            "vrf-vxlan" = ${VrfVxlan}
            "disable-arp-nd-suppression" = ${DisableArpNdSuppression}
            "controller" = ${Controller}
            "bridge-disable-mac-learning" = ${BridgeDisableMacLearning}
            "exitnodes-local-routing" = ${ExitnodesLocalRouting}
            "dhcp" = ${Dhcp}
            "bridge" = ${Bridge}
            "mtu" = ${Mtu}
            "exitnodes-primary" = ${ExitnodesPrimary}
            "advertise-subnets" = ${AdvertiseSubnets}
        }

        return $PSO
    }

}

