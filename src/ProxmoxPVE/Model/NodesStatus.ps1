#
# Proxmox VE
# Generated module to access all Proxmox VE Api Endpoints
# Version: 0.5
# Contact: amna.wolf@gmail.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Rootfs
No description available.
.PARAMETER Cpu
No description available.
.PARAMETER BootInfo
No description available.
.PARAMETER Loadavg
No description available.
.PARAMETER Memory
No description available.
.PARAMETER CurrentKernel
No description available.
.PARAMETER Pveversion
No description available.
.PARAMETER Cpuinfo
No description available.
.OUTPUTS

NodesStatus<PSCustomObject>
#>

function Initialize-PVENodesStatus {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Rootfs},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${Cpu},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${BootInfo},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Loadavg},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Memory},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${CurrentKernel},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Pveversion},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Cpuinfo}
    )

    Process {
        'Creating PSCustomObject: ProxmoxPVE => PVENodesStatus' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


		 $DisplayNameMapping =@{
			"Rootfs"="rootfs"; "Cpu"="cpu"; "BootInfo"="boot-info"; "Loadavg"="loadavg"; "Memory"="memory"; "CurrentKernel"="current-kernel"; "Pveversion"="pveversion"; "Cpuinfo"="cpuinfo"
        }
		
		 $OBJ = @{}
		foreach($parameter in   $PSBoundParameters.Keys){
			#If Specifield map the Display name back
			$OBJ.($DisplayNameMapping.($parameter)) = "$PSBoundParameters.$parameter"
		}

		$PSO = [PSCustomObject]$OBJ


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NodesStatus<PSCustomObject>

.DESCRIPTION

Convert from JSON to NodesStatus<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NodesStatus<PSCustomObject>
#>
function ConvertFrom-PVEJsonToNodesStatus {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ProxmoxPVE => PVENodesStatus' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PVENodesStatus
        $AllProperties = ("rootfs", "cpu", "boot-info", "loadavg", "memory", "current-kernel", "pveversion", "cpuinfo")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rootfs"))) { #optional property not found
            $Rootfs = $null
        } else {
            $Rootfs = $JsonParameters.PSobject.Properties["rootfs"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cpu"))) { #optional property not found
            $Cpu = $null
        } else {
            $Cpu = $JsonParameters.PSobject.Properties["cpu"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "boot-info"))) { #optional property not found
            $BootInfo = $null
        } else {
            $BootInfo = $JsonParameters.PSobject.Properties["boot-info"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "loadavg"))) { #optional property not found
            $Loadavg = $null
        } else {
            $Loadavg = $JsonParameters.PSobject.Properties["loadavg"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "memory"))) { #optional property not found
            $Memory = $null
        } else {
            $Memory = $JsonParameters.PSobject.Properties["memory"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "current-kernel"))) { #optional property not found
            $CurrentKernel = $null
        } else {
            $CurrentKernel = $JsonParameters.PSobject.Properties["current-kernel"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pveversion"))) { #optional property not found
            $Pveversion = $null
        } else {
            $Pveversion = $JsonParameters.PSobject.Properties["pveversion"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cpuinfo"))) { #optional property not found
            $Cpuinfo = $null
        } else {
            $Cpuinfo = $JsonParameters.PSobject.Properties["cpuinfo"].value
        }

        $PSO = [PSCustomObject]@{
            "rootfs" = ${Rootfs}
            "cpu" = ${Cpu}
            "boot-info" = ${BootInfo}
            "loadavg" = ${Loadavg}
            "memory" = ${Memory}
            "current-kernel" = ${CurrentKernel}
            "pveversion" = ${Pveversion}
            "cpuinfo" = ${Cpuinfo}
        }

        return $PSO
    }

}

